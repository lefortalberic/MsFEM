// tools.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //


// Constructing normals
func real[int,int] consNormals(real[int,int] & pp) {
    // construct unit outward normals for a triangle of nodes pp (given with positive orientation)
    // if p_0 = (x_0, y_0) and p_1 = (x_1, y_1), 
    // then the normal opposite p_3 constructed here is parallel to (and points in the same direction as)
    //   n =  / (y_1 - y_0) \
    //        \-(x-1 - x_0) /

    real[int,int] normals(3,2); normals=0;
    for(int k=0; k<3; k++) {
        normals(k,0) =  ( pp((k+2)%3,1) - pp((k+1)%3,1) );
        normals(k,1) = -( pp((k+2)%3,0) - pp((k+1)%3,0) );
        real len = sqrt(normals(k,0)^2 + normals(k,1)^2);
        normals(k,:) = normals(k,:)/len;
    }
    return normals;
}

/*
// La recombinaison spatiale est dirigée par une bijection Recombine() qui associe à un numéro de triangle un autre numéro de triangle.
func int recombine (int indice, int Nmax) { //Recombinaison par carré sur cellule unite avec n=3
    // bijection from triangle k to triangle Recombine(k)
    int indiceout = indice;
    if (indice==2) {
        indiceout = 10;
    }
    if (indice==3) {
        indiceout = 11;
    }
    if (indice==6) {
        indiceout = 14;
    }
    if (indice==7) {
        indiceout = 15;
    }
    if (indice==10) {
        indiceout = 2;
    }
    if (indice==11) {
        indiceout = 3;
    }
    if (indice==14) {
        indiceout = 6;
    }
    if (indice==15) {
        indiceout = 7;
    }
    return indiceout;
}
// La recombinaison spatiale est dirigée par une bijection Recombine() qui associe à un numéro de triangle un autre numéro de triangle.
func int recombine (int indice, int Nmax) { //Recombinaison par sur cellule unite avec n=3, des triangles loins du centre
    // bijection from triangle k to triangle Recombine(k)
    int indiceout = indice;
    if (indice==3) {
        indiceout = 11;
    }
    if (indice==2) {
        indiceout = 10;
    }
    if (indice==11) {
        indiceout = 3;
    }
    if (indice==10) {
        indiceout = 2;
    }
    return indiceout;
}*/
func int recombine (int indice, int Nmax) { //Recombinaison par sur cellule unite avec n=3, des triangles loins du centre
    // bijection from triangle k to triangle Recombine(k)
    int indiceout = indice;
    if (indice==0) {
        indiceout = 16;
    }
    if (indice==1) {
        indiceout = 15;
    }
    if (indice==4) {
        indiceout = 2;
    }
    if (indice==17) {
        indiceout = 13;
    }
    if (indice==5) {
        indiceout = 7;
    }
    if (indice==10) {
        indiceout = 12;
    }
    if (indice==16) {
        indiceout = 0;
    }
    if (indice==15) {
        indiceout = 1;
    }
    if (indice==2) {
        indiceout = 4;
    }
    if (indice==13) {
        indiceout = 17;
    }
    if (indice==7) {
        indiceout = 5;
    }
    if (indice==12) {
        indiceout = 10;
    }
    return indiceout;
}
/*
func int recombine (int indice, int Nmax) {
    // bijection from triangle k to triangle Recombine(k)
    int indiceout = indice;
    if (indice==0) {
        indiceout = 2;
    }
    if (indice==2) {
        indiceout = 0;
    }

    return indiceout;
}

// La recombinaison spatiale est dirigée par une bijection Recombine() qui associe à un numéro de triangle un autre numéro de triangle.
func int recombine (int indice, int Nmax) { //Nmax est pair, le numéro du dernier triangle vaut Nmax-1
    // bijection de [0,1,...,Nmax-1] dans lui-même qui au triangle k associe le triangle Recombine(k)
    // Attention dans le cas où recombine est différent de sa fonction inverse.
    // Pour l'instant je choisi des fonctions bijectives, égales à leur inverse.
    int indiceout = indice;
    if (indice%2 == 0) {
        indiceout = (Nmax-2)-indice;
    }
    return indiceout;
}

func int recombine (int indice, int Nmax) { //Nmax est pair, le numéro du dernier triangle vaut Nmax-1     //Recombinaison par carré
    // bijection de [0,1,...,Nmax-1] dans lui-même qui au triangle k associe le triangle Recombine(k)
    // Attention dans le cas où recombine est différent de sa fonction inverse.
    // Pour l'instant je choisi des fonctions bijectives, égales à leur inverse.
    int indiceout = indice;
    if (indice%4 == 0) {
        indiceout = (Nmax-4)-indice;
    }
    if ((indice-1)%4 == 0) {
        indiceout = (Nmax-2)-indice;
    }
    return indiceout;
}*/
/*
func int recombine (int indice, int Nmax) { //Nmax est pair, le numéro du dernier triangle vaut Nmax-1     //Recombinaison par duo de triangle
    // bijection de [0,1,...,Nmax-1] dans lui-même qui au triangle k associe le triangle Recombine(k)
    // Attention dans le cas où recombine est différent de sa fonction inverse.
    // Pour l'instant je choisi des fonctions bijectives, égales à leur inverse.
    int indiceout = indice;
    if (indice%4 == 0) {
        indiceout = (Nmax-4)-indice;
    }
    if ((indice-3)%4 == 0) {
        indiceout = (Nmax-1)-indice+3;
    }
    return indiceout;
}
*/
func real characteristic(real x, real inf, real sup)
{
    if (x > inf && x < sup)
        return 1;
    else
        return 0;
}

// Check if (x,y) - u2 points in the same direction as a normal vector u1
// A positive value means that this condition is indeed satisfied
macro ipcheck(u1, u2) ( u1[0]*(x-u2[0]) + u1[1]*(y-u2[1]) )// EOM


macro printmessage(message) {

    cout << message << endl;
    ffLog << message << endl;
}
//EOM
