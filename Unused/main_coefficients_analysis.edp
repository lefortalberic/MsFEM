// Etudie les oscillations des solutions, pour fixer les différents contrastes
//
//
//

//mpirun -np 1 FreeFem++-mpi -wg main_coefficients_analysis.edp -v 0

string nameMethod = "coefficients_analysis";

include "init.edp"

Vh Ayplot = Ay(x,y); Vh sigmayplot = sigmay(x,y); 
if (plots) plot(Ayplot, value=1, cmm="Diffusion coefficient on Y", wait=1);
if (plots) plot(sigmayplot, value=1, cmm="Sigma coefficient on Y", wait=1);


// Cellule unité
fespace Vhperio(Th, P1, periodic=[[2, y], [4, y], [1, x], [3, x]]); //bi-periodic FE

// Problem
varf opOmega (u, v)
    = int2d(Th)(
        sigmaeps(x,y)*u*v)
    + int2d(Th)(eps^2*a(Aeps(x,y),u,v))
    ;

varf bOmega (u, v) = int2d(Th)(u*v); //no boundary condition

printmessage("Resolution du probleme aux valeurs propres");
tic = clock();

matrix<real> APer = opOmega(Vhperio, Vhperio, factorize=1);
matrix<real> BPer = bOmega(Vhperio, Vhperio, solver=CG, eps=1e-20);

Mat APertemp = APer;
Mat BPertemp = BPer;

real[int] ListelambdaPer(1); //to store the nev eigenvalue
Vhperio[int] ListeVecteurproprePer(1); //to store the nev eigenvector

int k = EPSSolve(APertemp, BPertemp, vectors = ListeVecteurproprePer, values  = ListelambdaPer, sparams = ssparams); //Résolution du pb aux vp
k=min(k,1); // il arrive apparement qu'il n'y a pas que la 1ere vp renvoyee de cette fonction

real lambdaPer = ListelambdaPer[0]; //La fonction EPSSolve n'a l'air de vouloir que des vecteurs des valeurs propres et vectpropres
Vhperio VecteurproprePer;
VecteurproprePer[] = ListeVecteurproprePer[0][];

Vhperio absVecteurproprePer = abs(VecteurproprePer);
if (VecteurproprePer[].max/absVecteurproprePer[].max<0.9)  //Evaluation au point milieu
{
    VecteurproprePer = -VecteurproprePer;
}

// Renormalisation
real normeL2Per=sqrt(int2d(Th)(VecteurproprePer*VecteurproprePer));
VecteurproprePer[] = VecteurproprePer[]/normeL2Per;

toc = clock();

printmessage("Temps de resolution du probleme aux valeurs propres dans la cellule unite : " << toc - tic << " secondes ");
printmessage("lambda_Per = " << lambdaPer);

real Variationsmax = 0;
Variationsmax = max(VecteurproprePer[].max - VecteurproprePer[].min, Variationsmax);
printmessage("Variations maximum de U_per sur Omega : " << Variationsmax);

if (plots) plot(VecteurproprePer,wait=1,value=1,fill=1, cmm="U_Per sur la cellule unite");