///////////////////////////////////////////////////////////////////////
// POST-PROCESSING                                                   //
// (msfem_blocks/post.idp)                                           //
///////////////////////////////////////////////////////////////////////
string name = "REF";

///////////////////////////////////////////////////////////////////////
// Reference solution and error computation                          //
///////////////////////////////////////////////////////////////////////

// Load or compute reference solution
tic = clock();

printmessage("WARNING: No reference solution was found and it is recomputed");
// Problem
real lambdaref;
Vh Vecteurpropreref1, Vecteurpropreref2;
// Problem
varf opref ([uref1,uref2], [vh1,vh2])  
    = int2d(Th)(eps^2*a(Aeps1,uref1,vh1))
    + int2d(Th)(eps^2*a(Aeps2,uref2,vh2))
    + int2d(Th)((sigmaeps1*uref1 + sigmaeps2*uref2)*vh1
          +(sigmaeps3*uref1 + sigmaeps4*uref2)*vh2) 
    + on(1, 2, 3, 4, uref1=0)
    + on(1, 2, 3, 4, uref2=0)
    ;

varf bref ([uref1,uref2], [vh1,vh2]) = int2d(Th)(uref1*vh1 + uref2*vh2); //no boundary condition

matrix<real> Aref = opref(VhVh, VhVh, factorize=1); 
matrix<real> Bref = bref(VhVh, VhVh, solver=CG, eps=1e-20);

Mat Areftemp = Aref;
Mat Breftemp = Bref;

real[int] Listelambdaref(NumberEigenValue); //to store the nev eigenvalue (nev = 1 ici)
VhVh[int] [ListeVecteurpropreref1,ListeVecteurpropreref2](NumberEigenValue); //to store the nev eigenvector


int kref = EPSSolve(Areftemp, Breftemp, vectors = ListeVecteurpropreref1, values  = Listelambdaref, sparams = ssparams); //RÃ©solution du pb aux vp
kref=min(kref,NumberEigenValue);

toc = clock();

lambdaref = Listelambdaref[NumberEigenValue-1]; //La fonction EPSSolve n'a l'air de vouloir que des vecteurs des valeurs propres et vectpropres

cout << "lambdaref = " << lambdaref << endl;

Vecteurpropreref1 = ListeVecteurpropreref1[NumberEigenValue-1];
Vecteurpropreref2 = ListeVecteurpropreref2[NumberEigenValue-1];


Vh absVecteurpropreref1; absVecteurpropreref1 = abs(Vecteurpropreref1);
if (Vecteurpropreref1[].max/absVecteurpropreref1[].max<0.9)
{
    Vecteurpropreref1 = -Vecteurpropreref1;
}
Vh absVecteurpropreref2 = abs(Vecteurpropreref2);
if (Vecteurpropreref2[].max/absVecteurpropreref2[].max<0.9)
{
    Vecteurpropreref2 = -Vecteurpropreref2;
}

// Renormalisation
real normeL2ref=sqrt(int2d(Th)(Vecteurpropreref1*Vecteurpropreref1 + Vecteurpropreref2*Vecteurpropreref2));
Vecteurpropreref1[] = Vecteurpropreref1[]/normeL2ref;
Vecteurpropreref2[] = Vecteurpropreref2[]/normeL2ref;

//toc = clock();

printmessage("Temps de calcul de la solution de reference : " << toc - tic << " secondes ");
printmessage("lambda_" << nameMethod << " = " << lambdaH);

if (plots) plot(Vecteurpropreref1,wait=1,value=1,fill=1, cmm="Solution de reference Energie 1");

if (plots) plot(Vecteurpropreref2,wait=1,value=1,fill=1, cmm="Solution de reference Energie 2");

printmessage("Calcul des erreurs et stockage dans un fichier");
tic = clock();

// Compute norms of reference solution
real nL11=0, nL21=0, nH11=0, nMoy1=0, nMax1=0;
real nL12=0, nL22=0, nH12=0, nMoy2=0, nMax2=0;
nL11=sqrt(int2d(Th)(Vecteurpropreref1));
nL12=sqrt(int2d(Th)(Vecteurpropreref2));
nL21=sqrt(int2d(Th)(Vecteurpropreref1*Vecteurpropreref1));
nL22=sqrt(int2d(Th)(Vecteurpropreref2*Vecteurpropreref2));
nMax1=Vecteurpropreref1[].max;
nMax2=Vecteurpropreref2[].max;
string printNorms = "norms: " + nL11 + "  " + nL21 + "  " + nH11 + "  " + nMax1;

// Compute errors and relative errors
Vh e1=0;
Vh e2=0;
Vh ErreurH1SansBordK1 = 0;
Vh ErreurH1SansBordK2 = 0;
real eL11, eL12, eL21, eL22, eH11, eH12, eMax1, eMax2, elambda, eMoy1, eMoy2, erL11, erL12, erL21, erL22, erH11, erH12, erMax1, erMax2, erlambda, erMoy1, erMoy2;
real eGlobalL2, eGlobalH1, eGlobalMax;
for(int k=0; k<Ntri; k++) {

    vk[][k]=1;
    int[int] n2oFine;
	mesh Kh=trunc(Th, vk>0.5, split=1, new2old=n2oFine);
    fespace VK(Kh,P1);
	int[int] loc2globFine = restrict(VK, Vh, n2oFine);
    
    VK errK1=0;
    VK errK2=0;
    if (nameMethod=="P1") {
        VK f11 = 0; f11[] = VecteurpropreHProjetee1[](loc2globFine);
        VK f12 = 0; f12[] = Vecteurpropreref1[](loc2globFine);
        errK1[] = f12[] - f11[];
        VK f21 = 0; f21[] = VecteurpropreHProjetee2[](loc2globFine);
        VK f22 = 0; f22[] = Vecteurpropreref2[](loc2globFine);
        errK2[] = f22[] - f21[];

    }else { // Je separe les cas car sur le bord du triangle, il faut bien que la valeur de Uhloc_K soit celle correspondant a la fonction de forme sur K et pas celle d'a cote (voir fin de online.MsFEM pour mieux comprendre)
        //VK f1 = 0; f1[] = VecteurpropreHProjetee[](loc2globFine);
        real[int] uhloc1(VK.ndof);
        real[int] uhloc2(VK.ndof);
        for (int i=0; i<3; i++) {
            int dofi = VH(k,i);
            int storei = storeIndex(k,i);
            uhloc1 += Vecteurpropremsfem1[][dofi]*phiEps11[storei][];
            uhloc2 += Vecteurpropremsfem2[][dofi]*phiEps22[storei][];
        }

        errK1[] = Vecteurpropreref1[](loc2globFine);
        errK1[] = errK1[] - uhloc1;
        errK2[] = Vecteurpropreref2[](loc2globFine);
        errK2[] = errK2[] - uhloc2;

        VK errKH11 = 0;
        errKH11 = dx(errK1)*dx(errK1) + dy(errK1)*dy(errK1);
        ErreurH1SansBordK1[](loc2globFine) = errKH11[];
        VK errKH12 = 0;
        errKH12 = dx(errK2)*dx(errK2) + dy(errK2)*dy(errK2);
        ErreurH1SansBordK2[](loc2globFine) = errKH12[];
    }

    e1[](loc2globFine) = errK1[];
    e2[](loc2globFine) = errK2[];
    VK VecteurproprerefK1 = 0;
    VK VecteurproprerefK2 = 0;
    VecteurproprerefK1[] = Vecteurpropreref1[](loc2globFine);
    VecteurproprerefK2[] = Vecteurpropreref2[](loc2globFine);
    
    nMoy1+=int2d(Kh)(VecteurproprerefK1)*int2d(Kh)(VecteurproprerefK1);
    nMoy2+=int2d(Kh)(VecteurproprerefK2)*int2d(Kh)(VecteurproprerefK2);


    // Error computations on K
    
    eL11+=int2d(Kh)(abs(errK1));
    eL12+=int2d(Kh)(abs(errK2));
    
    eL21+=int2d(Kh)(errK1*errK1);
    eL22+=int2d(Kh)(errK2*errK2);
    
    eH11+=int2d(Kh)(dx(errK1)*dx(errK1)+dy(errK1)*dy(errK1) + errK1*errK1);
    eH12+=int2d(Kh)(dx(errK2)*dx(errK2)+dy(errK2)*dy(errK2) + errK2*errK2);
    nH11+=int2d(Kh)(VecteurproprerefK1*VecteurproprerefK1 + dx(VecteurproprerefK1)*dx(VecteurproprerefK1) + dy(VecteurproprerefK1)*dy(VecteurproprerefK1));
    nH12+=int2d(Kh)(VecteurproprerefK2*VecteurproprerefK2 + dx(VecteurproprerefK2)*dx(VecteurproprerefK2) + dy(VecteurproprerefK2)*dy(VecteurproprerefK2));

    eMoy1+=int2d(Kh)(errK1)*int2d(Kh)(errK1);
    eMoy2+=int2d(Kh)(errK2)*int2d(Kh)(errK2);
    
    errK1=abs(errK1);
    errK2=abs(errK2);

    eMax1=max(errK1[].max,eMax1);
    eMax2=max(errK2[].max,eMax2);

    vk[][k]=0;
}
// Taking square roots, determining the relative errors

eL21 = sqrt(eL21);
eH11 = sqrt(eH11);
nH11 = sqrt(nH11);
eL22 = sqrt(eL22);
eH12 = sqrt(eH12);
nH12 = sqrt(nH12);

erL11=eL11/nL11; erL21=eL21/nL21;
erL21=eL21/nL21; erL22=eL22/nL22;
erH11=eH11/nH11; erH12=eH12/nH12;
erMoy1 = sqrt(eMoy1/nMoy1); erMoy2 = sqrt(eMoy2/nMoy2);
erMax1=eMax1/nMax1; erMax2=eMax2/nMax2;

eGlobalL2 = sqrt(erL21^2 + erL22^2)/sqrt(2);
eGlobalH1 = sqrt(erH11^2 + erH12^2)/sqrt(2);
eGlobalMax = max(erMax1,erMax2);

elambda = abs(lambdaH - lambdaref);
erlambda = abs(lambdaH - lambdaref)/lambdaref;

if (plots) plot(e1,wait=1,value=1, cmm="error Energie 1");
if (plots) plot(e2,wait=1,value=1, cmm="error Energie 2");

if (plots) plot(ErreurH1SansBordK1,wait=1,value=1, cmm="error, derivee Energie 1");
if (plots) plot(ErreurH1SansBordK2,wait=1,value=1, cmm="error, derivee Energie 2");

{// Writing errors to an external file
    string errname = "Results/errors_reaction_diffusion_multigroup_" + nameMethod + "_Coeffs_" + NumCoeffDiff + ".txt";
    ofstream ff(errname, append);
    ff  << ParameterDescription
        << endl
        << "\t"
        << "n\t" << n << "\t"
        << "N\t" << Ndiscr << "\t"
        << "eps\t" << eps << "\t"
        << "NumVP\t" << NumberEigenValue << "\t"
        << "osCoef\t" << osCoef << "\t"
        << endl

        << "\t\tL21\t\tL22\t\tH11\t\tH12\t\tmax1\t\tmax2\t\tlambdarel\t\teGlobalL2\t\teGlobalH1\t\teGlobalMax\t\t"
        << endl;        
    
    ff  << "\t\t"
        << erL21 <<"\t"<< erL22 <<"\t"<< erH11 <<"\t"<< erH12 <<"\t"<< erMax1 <<"\t" << erMax2 <<"\t" << erlambda <<"\t"
        <<"\t"<< eGlobalL2 <<"\t"<<"\t"<< eGlobalH1 <<"\t"<<"\t"<< eGlobalMax <<"\t"
        << endl;
    
	ff<<endl;
}
toc = clock();

printmessage("Temps de calcul des erreurs : " << toc - tic << " secondes ");

printmessage("////////////////////////////////////////////////////////////////");