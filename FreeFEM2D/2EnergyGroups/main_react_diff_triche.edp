// react_diff_P1.edp
//
// A FreeFEM++ script that shows the usual, intrusive MsFEM approach on a simple diffusion problem
//
// Note that this implementation is possible mainly due to the following in-depth functionality of FreeFEM++:
// - VK(k,i) gives the global degree of freedom of the ith local DOF in the kth triangle of the mesh

//mpirun -np 1 FreeFem++-mpi -wg main_react_diff_triche.edp -v 0
string nameMethod = "triche";

include "init.edp"

///////////////////////////////////////////////////////////////////////
// Offline stage                                                     //
// - Computation of spectral function Psi_triche                     //
// - Computation of multiscale basis functions                       //
// - Computation of stiffness matrix                                 //
//(- The discrete right-hand side is also computed here)             //
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// - Computation of spectral function Psi_triche                     //
///////////////////////////////////////////////////////////////////////

include "Psi_triche.edp"

///////////////////////////////////////////////////////////////////////
// - Computation of multiscale basis functions                       //
///////////////////////////////////////////////////////////////////////

Psieps1 = VecteurproprePsi1(fmod(x/eps,1), fmod(y/eps,1)) ;
Psieps2 = VecteurproprePsi2(fmod(x/eps,1), fmod(y/eps,1)) ;
Psiepsadjoint1 = VecteurproprePsiadjoint1(fmod(x/eps,1), fmod(y/eps,1)) ;
Psiepsadjoint2 = VecteurproprePsiadjoint2(fmod(x/eps,1), fmod(y/eps,1)) ;

if (debug) plot(Psieps1,wait=1,value=1,fill=1, cmm="Psi 1 en x/eps sur Omega");
if (debug) plot(Psieps2,wait=1,value=1,fill=1, cmm="Psi 2 en x/eps sur Omega");
if (debug) plot(Psiepsadjoint1,wait=1,value=1,fill=1, cmm="Psiadjoint 1 en x/eps sur Omega");
if (debug) plot(Psiepsadjoint2,wait=1,value=1,fill=1, cmm="Psiadjoint 2 en x/eps sur Omega");


printmessage("Construction des fonctions de forme ");
tic = clock();

for (int k=0; k<Ntri; k++) {
	vk[][k]=1;
	mesh Kh=trunc(Th, vk>1e-10, split=1); //mesh for the fine-scale resolution of MsFEM functions   
	fespace VK(Kh,P1);
	fespace VKVK(Kh,[P1,P1]);
	//VKVK[int] phi1(3); //storage of local basis function contributions in the offline loop
	//VKVK[int] phi2(3); //storage of local basis function contributions in the offline loop
	//VK[int] phi(3); //storage of local basis function contributions in the offline loop
    if (SymetrieBool) {

		real tmpx = int2d(Kh)(Aeps1*(Psieps1*dx(Psiepsadjoint1)-Psiepsadjoint1*dx(Psieps1)))
                     + int2d(Kh)(Aeps2*(Psieps2*dx(Psiepsadjoint2)-Psiepsadjoint2*dx(Psieps2)));
		cout << "tmpx = " << tmpx << endl;
        SymetrieCstx += tmpx;

		real tmpxdenom = int2d(Kh)(abs(Aeps1*(Psieps1*dx(Psiepsadjoint1)-Psiepsadjoint1*dx(Psieps1))))
					 + int2d(Kh)(abs(Aeps2*(Psieps2*dx(Psiepsadjoint2)-Psiepsadjoint2*dx(Psieps2))));
		cout << "tmpxdenom = " << tmpxdenom << endl;
        SymetrieCstxDenominateur += tmpxdenom;

		real tmpy = int2d(Kh)(Aeps1*(Psieps1*dy(Psiepsadjoint1)-Psiepsadjoint1*dy(Psieps1)))
					 + int2d(Kh)(Aeps2*(Psieps2*dy(Psiepsadjoint2)-Psiepsadjoint2*dy(Psieps2)));
		cout << "tmpy = " << tmpy << endl;
        SymetrieCsty += tmpy;

		real tmpydenom = int2d(Kh)(abs(Aeps1*(Psieps1*dy(Psiepsadjoint1)-Psiepsadjoint1*dy(Psieps1))))
					 + int2d(Kh)(abs(Aeps2*(Psieps2*dy(Psiepsadjoint2)-Psiepsadjoint2*dy(Psieps2))));
		cout << "tmpydenom = " << tmpydenom << endl;
        SymetrieCstyDenominateur += tmpydenom;

		cout << "SymetrieCstx/SymetrieCstxDenominateur = " << tmpx/tmpxdenom << endl;
		cout << "SymetrieCsty/SymetrieCstyDenominateur = " << tmpy/tmpydenom << endl;
    }
	// Resolution of local problems
	varf defMS([uh1,uh2],[vh1,vh2]) = 

	  int2d(Kh)(eps^2*Psieps1*Psiepsadjoint1*a(Aeps1,uh1,vh1)) // D_eps
	+ int2d(Kh)(eps^2*Psieps2*Psiepsadjoint2*a(Aeps2,uh2,vh2))

	+ int2d(Kh)(Psieps2*Psiepsadjoint1*sigmaeps2*(uh2 - uh1)*vh1) //Q_tilde_eps
	+ int2d(Kh)(Psieps1*Psiepsadjoint2*sigmaeps3*(uh1 - uh2)*vh2)

	+ int2d(Kh)(eps*Aeps1*(Psieps1*dx(Psiepsadjoint1)-Psiepsadjoint1*dx(Psieps1))*dx(uh1)*vh1) //J_eps
	+ int2d(Kh)(eps*Aeps1*(Psieps1*dy(Psiepsadjoint1)-Psiepsadjoint1*dy(Psieps1))*dy(uh1)*vh1)
	+ int2d(Kh)(eps*Aeps2*(Psieps2*dx(Psiepsadjoint2)-Psiepsadjoint2*dx(Psieps2))*dx(uh2)*vh2)
	+ int2d(Kh)(eps*Aeps2*(Psieps2*dy(Psiepsadjoint2)-Psiepsadjoint2*dy(Psieps2))*dy(uh2)*vh2)
	
	+ int1d(Kh)(tgv*uh1*vh1 + tgv*uh2*vh2); // Dirichlet boundary condition;
	
	matrix Aloc=defMS(VKVK,VKVK);
	set(Aloc, solver=UMFPACK);
	VH bc=0; //will hold the boundary condition for local problems

	VK[int] Phi11(3) ; VK[int] Phi12(3); //storage of local basis function contributions in the offline loop;
	VK[int] Phi21(3) ; VK[int] Phi22(3); //storage of local basis function contributions in the offline loop;	
	for (int i=0; i<3; i++) {

		VKVK [phi1,phi2]; //storage of local basis function contributions in the offline loop
		//VK phi1; //storage of local basis function contributions in the offline loop
		//VK phi2; //storage of local basis function contributions in the offline loop
		
		int dofi = VH(k,i); // the index in VH associated to vertex i of triangle k
		bc[][dofi] = 1;
		varf rhsloc([uh1,uh2],[vh1,vh2]) = int1d(Kh)(tgv*bc*vh1 + tgv*bc*vh2);
		real[int] Bloc = rhsloc(0,VKVK);

		phi1[] = Aloc^-1*Bloc;
		bc[][dofi]=0;

        if (debug){
            plot(phi1,wait=1,value=1,fill=1, cmm="fonction forme Chi 1");
			plot(phi2,wait=1,value=1,fill=1, cmm="fonction forme Chi 2");
        }
		int storei = 0;
		storei = storeIndex(k,i);

		VK phi1Psieps1 = phi1*Psieps1; 
        VK phi2Psieps2 = phi2*Psieps2;

		Phi11[i][] = phi1Psieps1[];
		Phi22[i][] = phi2Psieps2[];
		Phi12[i][] = phi1Psieps1[]*0;
		Phi21[i][] = phi2Psieps2[]*0;

		if (debug){
			plot(Phi11[i],wait=1,value=1,fill=1, cmm="fonction forme Chi Psi 1");	
			plot(Phi22[i],wait=1,value=1,fill=1, cmm="fonction forme Chi Psi 2");		
		}
		phiEps11[storei][] = Phi11[i][]; // save basis functions for multiscale reconstruction below
		phiEps12[storei][] = Phi12[i][]; // save basis functions for multiscale reconstruction below
		phiEps21[storei][] = Phi21[i][]; // save basis functions for multiscale reconstruction below
		phiEps22[storei][] = Phi22[i][]; // save basis functions for multiscale reconstruction below
        
	}
	// Computation of matrix elements
	for (int j=0; j<3; j++)
	{ //loop over all corners for matrix contributions on K
		for (int i=0; i<3; i++) {
			// int ii = contr[i]; // seems superfluous ???
			// Find global DOF index for trial functions j and test function i,
			// compute matrix contributions,
			// save these in Imat[nnz], Jmat[nnz] and Mmat[nnz]
            //if (recombinebool){
            //    Imat[nnz] = VH(recombine(k,Ntri),i);
			//    Jmat[nnz] = VH(recombine(k,Ntri),j);
            //} else {
			Imat[nnz] = VH(k,i);
			Jmat[nnz] = VH(k,j);
            //}
			Amat1[nnz] = int2d(Kh)(eps^2*a(Aeps1, Phi11[i], Phi11[j]));
			Amat2[nnz] = int2d(Kh)(eps^2*a(Aeps2, Phi22[i], Phi22[j]));

			Sigmamat11[nnz] = int2d(Kh)(sigmaeps1*Phi11[i]*Phi11[j]);
			Sigmamat12[nnz] = int2d(Kh)(sigmaeps2*Phi11[i]*Phi22[j]);
			Sigmamat21[nnz] = int2d(Kh)(sigmaeps3*Phi22[i]*Phi11[j]);
			Sigmamat22[nnz] = int2d(Kh)(sigmaeps4*Phi22[i]*Phi22[j]);

            Bmat1[nnz] = int2d(Kh)(Phi11[i]*Phi11[j]);
			Bmat2[nnz] = int2d(Kh)(Phi22[i]*Phi22[j]);
			nnz++;
		}
	}
	vk[][k]=0;
}
toc = clock();

printmessage("Temps de construction des fonctions de forme : " << toc - tic << " secondes ");

///////////////////////////////////////////////////////////////////////
// Online stage                                                      //
///////////////////////////////////////////////////////////////////////

include "online_MsFEM.edp"


///////////////////////////////////////////////////////////////////////
// Reference solution and error computation                          //
///////////////////////////////////////////////////////////////////////
/*
// Load or compute reference solution
 if (ErreurSurK) {
	{
		string solname = "./Solutions_reference/sol_" + nameMethod + parametersREF + ".txt";
		ofstream ff(solname);
		ff << VecteurpropreHProjetee[] << endl;
		ff << endl;
	}
}*/

include "post.edp"
