// react_diff_P1.edp
//
// A FreeFEM++ script that shows the usual, intrusive MsFEM approach on a simple diffusion problem
//
// Note that this implementation is possible mainly due to the following in-depth functionality of FreeFEM++:
// - VK(k,i) gives the global degree of freedom of the ith local DOF in the kth triangle of the mesh

//mpirun -np 1 FreeFem++-mpi -wg main_react_diff_MsFEM_OS_square_filtre.edp -v 0

string nameMethod = "MsFEM_OS_carre_filtre";

include "init.edp"
///////////////////////////////////////////////////////////////////////
// Offline stage                                                     //
// - Computation of multiscale basis functions                       //
// - Computation of stiffness matrix                                 //
//(- The discrete right-hand side is also computed here)             //
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// - Computation of multiscale basis functions                       //
///////////////////////////////////////////////////////////////////////

printmessage("Construction des fonctions de forme ");

tic = clock();

for (int k=0; k<Ntri; k++) { //Ntri = nombre de triangles du maillage grossier

    vk[][k]=1;
    // Defining the vertices of the ideal oversampling patch (possibly lying partially outside the global domain)
    real[int,int] Kx(3,2); //save coordinates of the vertices belonging to K
    for(int kk=0; kk<3; kk++) {
        Kx(kk,0) = TH[k][kk].x;
        Kx(kk,1) = TH[k][kk].y;
    }
    real[int,int] Sx(3,2); //compute coordinates for the ideal oversampling patch by homothety
    for(int kk=0; kk<3; kk++) {
        Sx(kk,0) = (osCoef)*(Kx(kk,0) - xb[][k]) + xb[][k];
        Sx(kk,1) = (osCoef)*(Kx(kk,1) - yb[][k]) + yb[][k];
    }

    // Construction of a patch-container C around S that is (much) smaller than Omega
    int NxC = Nx/nx;
    int NyC = Ny/ny;

    real xCL = (floor(Sx(:,0).min/hx)-1)*hx; //we take a small margin around the vertices of S as computed above

    real xCR = (ceil(Sx(:,0).max/hx)+1)*hx;

    real yCL = (floor(Sx(:,1).min/hy)-1)*hy;

    real yCR = (ceil(Sx(:,1).max/hy)+1)*hy;

    if (PriseEnCompteBord){

        xCL = max(0.,xCL); //ensure that the patch-container is a subset of the global domain
        xCR = min(Lx, xCR);
        yCL = max(0., yCL);
        yCR = min(Ly, yCR);

            if (CentrePatchCarre){

                real osCoefCentre ;
                real DX = max(abs(Kx(0,0) - xb[][k]),abs(Kx(1,0) - xb[][k]), abs(Kx(2,0) - xb[][k])) ;
                real DY = max(abs(Kx(0,1) - yb[][k]),abs(Kx(1,1) - yb[][k]), abs(Kx(2,1) - yb[][k])) ;
                real OS1 = (xb[][k] - xCL)/abs(Kx(0,0) - xb[][k]);
                osCoefCentre = min(OS1, osCoef);
                real OS2 = (xCR - xb[][k])/abs(Kx(1,0) - xb[][k]) ;
                osCoefCentre = min(OS2, osCoefCentre);
                real OS3 = (yb[][k] - yCL)/abs(Kx(0,1) - yb[][k]) ;
                osCoefCentre = min(OS3, osCoefCentre);
                real OS4 = (yCR - yb[][k])/abs(Kx(2,1) - yb[][k]) ;
                osCoefCentre = min(OS4, osCoefCentre);

                for(int kk=0; kk<3; kk++) {
                    Sx(kk,0) = (osCoefCentre)*(Kx(kk,0) - xb[][k]) + xb[][k];
                    Sx(kk,1) = (osCoefCentre)*(Kx(kk,1) - yb[][k]) + yb[][k];
            }
                // Construction of a patch-container C around S that is (much) smaller than Omega
                xCL = (floor(Sx(:,0).min/hx)-1)*hx; //we take a small margin around the vertices of S as computed above

                xCR = (ceil(Sx(:,0).max/hx)+1)*hx;

                yCL = (floor(Sx(:,1).min/hy)-1)*hy;

                yCR = (ceil(Sx(:,1).max/hy)+1)*hy;

                xCL = max(0.,xCL); //ensure that the patch-container is a subset of the global domain
                xCR = min(Lx, xCR);
                yCL = max(0., yCL);
                yCR = min(Ly, yCR);

            }
    }


    real dxC = xCR - xCL;
    int dxCn = lrint(dxC/hx); //integer closest to dxC/hx -- ensures that the mesh C defined below is compatible with Th
    real dyC = yCR - yCL;
    int dyCn = lrint(dyC/hy);

    mesh C=square(dxCn, dyCn, [xCL + dxC*x, yCL + dyC*y]);
    fespace VC(C, P1);


    // Construction of the actual coarse mesh element K inside of the patch
    int[int] S2K;
    mesh K=trunc(C,vk>0.5,split=1,label=1,new2old=S2K); 
    fespace VK(K,P1);
    fespace VKVK(K,[P1,P1]);
    int[int] RS2K = restrict(VK,VC,S2K); //array for the restriction of a function on S to K

    if (debug){
        plot(C, vk, fill=1, cmm="Mesh element and oversampling patch", wait=1);
        plot(C, K, cmm="Coarse mesh element", wait=1);
        VC aplotS1=Aeps1(x,y);
        plot(aplotS1, value=1, cmm="Diffusion coefficient 1 on S", wait=1);
        }
    //printmessage("moyenne de sigmaeps sur le patch S : " << int2d(C)(sigmaeps)/int2d(C)(1));
    //printmessage("moyenne de a sur le patch S : " << int2d(C)(Aeps)/int2d(C)(1));
    // Problem
    varf oploc11 (u,v)
            = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*(sigmaeps1*u*v))
            + int2d(C)(eps^2*FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*a(Aeps1,u,v))
            ;
    varf oploc22 (u,v)
            = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*(sigmaeps4*u*v))
            + int2d(C)(eps^2*FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*a(Aeps2,u,v))
            ;

    varf oploc12 (u,v)
            = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*(sigmaeps2*u)*v)
            ;

    varf oploc21 (u,v)
            = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*(sigmaeps3*u)*v)
            ;

    varf bloc (u,v) = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*u*v); //no boundary condition

    varf CLXfiltreloc (u, v)
        = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*1*dx(v)) 
        ;
    varf CLYfiltreloc (u,v)
        = int2d(C)(FiltrePhi((x-xCL)/dxC,(y-yCL)/dyC)*1*dy(v)) 
        ;

    matrix<real> A11 = oploc11(VC, VC, factorize=1);
    matrix<real> A22 = oploc22(VC, VC, factorize=1);
    matrix<real> A12 = oploc12(VC, VC, factorize=1);
    matrix<real> A21 = oploc21(VC, VC, factorize=1);
    matrix<real> B = bloc(VC, VC, solver=CG, eps=1e-20);

    real[int] CLXfiltreloclocS1 = CLXfiltreloc(0, VC);
    real[int] CLYfiltreloclocS1 = CLYfiltreloc(0, VC);

    real[int] Zeros = 0*CLXfiltreloclocS1;

    matrix CLXfiltreloclocS11(2*(CLXfiltreloclocS1.n),1); CLXfiltreloclocS11 = [[CLXfiltreloclocS1], [Zeros]];
    matrix CLYfiltreloclocS11(2*(CLYfiltreloclocS1.n),1); CLYfiltreloclocS11 = [[CLYfiltreloclocS1], [Zeros]];
    matrix CLXfiltreloclocS12(2*(CLXfiltreloclocS1.n),1); CLXfiltreloclocS12 = [ [Zeros], [CLXfiltreloclocS1]];
    matrix CLYfiltreloclocS12(2*(CLYfiltreloclocS1.n),1); CLYfiltreloclocS12 = [ [Zeros], [CLYfiltreloclocS1]];
    matrix MatZeros = 0*A11;


    matrix AlocStmp(2*(A11.n)+4,2*(A11.n)+4);
    matrix AlocStmpadjoint(2*(A11.n)+4,2*(A11.n)+4);
    matrix BlocStmp(2*(A11.n)+4,2*(A11.n)+4);
    AlocStmp = [ [A11 , A12 , CLXfiltreloclocS1 , CLYfiltreloclocS1, Zeros, Zeros] , [A21 , A22 , Zeros, Zeros, CLXfiltreloclocS1 , CLYfiltreloclocS1] , [CLXfiltreloclocS1' ,Zeros',0, 0, 0, 0] , [CLYfiltreloclocS1',Zeros',0, 0, 0, 0] , [Zeros', CLXfiltreloclocS1',0, 0, 0, 0] , [Zeros', CLYfiltreloclocS1',0, 0, 0, 0] ];
    AlocStmpadjoint = [ [A11 , A21 , CLXfiltreloclocS1 , CLYfiltreloclocS1, Zeros, Zeros] , [A12 , A22 , Zeros, Zeros, CLXfiltreloclocS1 , CLYfiltreloclocS1] , [CLXfiltreloclocS1' ,Zeros',0, 0, 0, 0] , [CLYfiltreloclocS1',Zeros',0, 0, 0, 0] , [Zeros', CLXfiltreloclocS1',0, 0, 0, 0] , [Zeros', CLYfiltreloclocS1',0, 0, 0, 0] ];

    BlocStmp = [ [B , MatZeros , Zeros , Zeros, Zeros, Zeros] , [MatZeros , B , Zeros, Zeros, Zeros, Zeros] , [Zeros',Zeros',0, 0, 0, 0] , [Zeros',Zeros',0, 0, 0, 0] , [Zeros', Zeros',0, 0, 0, 0] , [Zeros', Zeros',0, 0, 0, 0] ];

    Mat Aloctemp = AlocStmp;
    Mat Aloctempadjoint = AlocStmpadjoint;
    Mat Bloctemp = BlocStmp;

    real[int] Listelambdaloc(1); //to store the nev eigenvalue (nev = 1 ici)
    real[int,int] ListeVecteurproprelocS(AlocStmp.n,1) ; //to store the nev eigenvector

    int kloc = EPSSolve(Aloctemp, Bloctemp, values=Listelambdaloc , array=ListeVecteurproprelocS, sparams= ssparamsfiltre); //RÃ©solution du pb aux vp
    kloc=min(kloc,1);

    VC VecteurproprelocS1, VecteurproprelocS2;

    VecteurproprelocS1[](0:VecteurproprelocS1.n-1) = ListeVecteurproprelocS(0:VecteurproprelocS1.n-1,0);
    VecteurproprelocS2[](0:VecteurproprelocS2.n-1) = ListeVecteurproprelocS(VecteurproprelocS1.n:ListeVecteurproprelocS.n-3,0);

    real LagrangeMultiplier1 = ListeVecteurproprelocS(ListeVecteurproprelocS.n-2,0);
    real LagrangeMultiplier2 = ListeVecteurproprelocS(ListeVecteurproprelocS.n-1 ,0);

    VC absVecteurproprelocS1 = abs(VecteurproprelocS1);
    if (VecteurproprelocS1[].max/absVecteurproprelocS1[].max<0.9)
    {
        VecteurproprelocS1 = -VecteurproprelocS1;
    }
    VC absVecteurproprelocS2 = abs(VecteurproprelocS2);
    if (VecteurproprelocS2[].max/absVecteurproprelocS2[].max<0.9)
    {
        VecteurproprelocS2 = -VecteurproprelocS2;
    }

    // Renormalisation
    VK VecteurproprelocK1=0; VK VecteurproprelocK2=0;

    VecteurproprelocK1[] = VecteurproprelocS1[](RS2K);
    VecteurproprelocK2[] = VecteurproprelocS2[](RS2K);

    VK produittmp = VecteurproprelocK1*VecteurproprelocK1 + VecteurproprelocK2*VecteurproprelocK2;
    real normeL2VecteurproprelocK=sqrt(int2d(K)(produittmp)/int2d(K)(1));
    VecteurproprelocK1[] = VecteurproprelocK1[]/(normeL2VecteurproprelocK);
    VecteurproprelocK2[] = VecteurproprelocK2[]/normeL2VecteurproprelocK;

    real[int] Listelambdalocadjoint(1); //to store the nev eigenvalue (nev = 1 ici)
    real[int,int] ListeVecteurproprelocSadjoint(AlocStmpadjoint.n,1) ; //to store the nev eigenvector

    int klocadjoint = EPSSolve(Aloctempadjoint, Bloctemp, values=Listelambdalocadjoint , array=ListeVecteurproprelocSadjoint, sparams= ssparamsfiltre); //RÃ©solution du pb aux vp
    klocadjoint=min(klocadjoint,1);

    VC VecteurproprelocSadjoint1, VecteurproprelocSadjoint2;

    VecteurproprelocSadjoint1[](0:VecteurproprelocSadjoint1.n-1) = ListeVecteurproprelocSadjoint(0:VecteurproprelocSadjoint1.n-1,0);
    VecteurproprelocSadjoint2[](0:VecteurproprelocSadjoint2.n-1) = ListeVecteurproprelocSadjoint(VecteurproprelocSadjoint1.n:ListeVecteurproprelocSadjoint.n-3,0);

    VC absVecteurproprelocSadjoint1 = abs(VecteurproprelocSadjoint1);
    if (VecteurproprelocSadjoint1[].max/absVecteurproprelocSadjoint1[].max<0.9)
    {
        VecteurproprelocSadjoint1 = -VecteurproprelocSadjoint1;
    }
    VC absVecteurproprelocSadjoint2 = abs(VecteurproprelocSadjoint2);
    if (VecteurproprelocSadjoint2[].max/absVecteurproprelocSadjoint2[].max<0.9)
    {
        VecteurproprelocSadjoint2 = -VecteurproprelocSadjoint2;
    }
    VK VecteurproprelocKadjoint1=0; VK VecteurproprelocKadjoint2=0;
    VecteurproprelocKadjoint1[] = VecteurproprelocSadjoint1[](RS2K);
    VecteurproprelocKadjoint2[] = VecteurproprelocSadjoint2[](RS2K);
    // Renormalisation
    VK produittmpadjoint = VecteurproprelocKadjoint1*VecteurproprelocKadjoint1 + VecteurproprelocKadjoint2*VecteurproprelocKadjoint2;
    real normeL2VecteurproprelocKadjoint=sqrt(int2d(K)(produittmpadjoint)/int2d(K)(1));
    VecteurproprelocKadjoint1[] = VecteurproprelocKadjoint1[]/normeL2VecteurproprelocKadjoint;
    VecteurproprelocKadjoint2[] = VecteurproprelocKadjoint2[]/normeL2VecteurproprelocKadjoint;

    if (k==20 && plots) {
        plot(C, vk, fill=1, cmm="Mesh element and oversampling patch", wait=1);
        plot(C, K, cmm="Coarse mesh element", wait=1);
        VC aplotS=Aeps1(x,y);
        VC sigmaplotS = sigmaeps1(x,y);
        plot(aplotS, value=1, cmm="Diffusion coefficient on S", wait=1);
        plot(sigmaplotS, value=1, cmm="Sigma coefficient on S", wait=1);
        plot(VecteurproprelocS1, fill=1, value=1, cmm="Premier vecteur propre Energie 1", wait=1);
        plot(VecteurproprelocS2, fill=1, value=1, cmm="Premier vecteur propre Energie 2", wait=1);
        plot(VecteurproprelocK1, fill=1, value=1, cmm="Vecteur propre loc K Energie 1", wait=1);
        plot(VecteurproprelocK2, fill=1, value=1, cmm="Vecteur propre loc K Energie 2", wait=1);
        plot(VecteurproprelocKadjoint1, fill=1, value=1, cmm="Premier vecteur propre adjoint Energie 1", wait=1);
        plot(VecteurproprelocKadjoint2, fill=1, value=1, cmm="Premier vecteur propre adjoint Energie 2", wait=1);

    }
    if (SymetrieBool) {

		real tmpx = int2d(K)(Aeps1*(VecteurproprelocK1*dx(VecteurproprelocKadjoint1)-VecteurproprelocKadjoint1*dx(VecteurproprelocK1)))
                     + int2d(K)(Aeps2*(VecteurproprelocK2*dx(VecteurproprelocKadjoint2)-VecteurproprelocKadjoint2*dx(VecteurproprelocK2)));
		cout << "tmpx = " << tmpx << endl;
        SymetrieCstx += tmpx;

		real tmpxdenom = int2d(K)(abs(Aeps1*(VecteurproprelocK1*dx(VecteurproprelocKadjoint1)-VecteurproprelocKadjoint1*dx(VecteurproprelocK1))))
					 + int2d(K)(abs(Aeps2*(VecteurproprelocK2*dx(VecteurproprelocKadjoint2)-VecteurproprelocKadjoint2*dx(VecteurproprelocK2))));
		cout << "tmpxdenom = " << tmpxdenom << endl;
        SymetrieCstxDenominateur += tmpxdenom;

		real tmpy = int2d(K)(Aeps1*(VecteurproprelocK1*dy(VecteurproprelocKadjoint1)-VecteurproprelocKadjoint1*dy(VecteurproprelocK1)))
					 + int2d(K)(Aeps2*(VecteurproprelocK2*dy(VecteurproprelocKadjoint2)-VecteurproprelocKadjoint2*dy(VecteurproprelocK2)));
		cout << "tmpy = " << tmpy << endl;
        SymetrieCsty += tmpy;

		real tmpydenom = int2d(K)(abs(Aeps1*(VecteurproprelocK1*dy(VecteurproprelocKadjoint1)-VecteurproprelocKadjoint1*dy(VecteurproprelocK1))))
					 + int2d(K)(abs(Aeps2*(VecteurproprelocK2*dy(VecteurproprelocKadjoint2)-VecteurproprelocKadjoint2*dy(VecteurproprelocK2))));
		cout << "tmpydenom = " << tmpydenom << endl;
        SymetrieCstyDenominateur += tmpydenom;
    }
    //Construction des 3 fonctions de forme associÃ©es Ã  l'Ã©lÃ©ment K
    VK[int] phi(3); //storage of local basis function contributions in the offline loop
    // Resolution of local problems
    varf defMS([uh1,uh2],[vh1,vh2]) = 

        int2d(K)(eps^2*VecteurproprelocK1*VecteurproprelocKadjoint1*a(Aeps1,uh1,vh1)) // D_eps
        + int2d(K)(eps^2*VecteurproprelocK2*VecteurproprelocKadjoint2*a(Aeps2,uh2,vh2))

        + int2d(K)(VecteurproprelocK2*VecteurproprelocKadjoint1*sigmaeps2*(uh2 - uh1)*vh1) //Q_tilde_eps
        + int2d(K)(VecteurproprelocK1*VecteurproprelocKadjoint2*sigmaeps3*(uh1 - uh2)*vh2)

        + int2d(K)(eps^2*Aeps1*(VecteurproprelocK1*dx(VecteurproprelocKadjoint1)-VecteurproprelocKadjoint1*dx(VecteurproprelocK1))*dx(uh1)*vh1) //J_eps
        + int2d(K)(eps^2*Aeps1*(VecteurproprelocK1*dy(VecteurproprelocKadjoint1)-VecteurproprelocKadjoint1*dy(VecteurproprelocK1))*dy(uh1)*vh1)
        + int2d(K)(eps^2*Aeps2*(VecteurproprelocK2*dx(VecteurproprelocKadjoint2)-VecteurproprelocKadjoint2*dx(VecteurproprelocK2))*dx(uh2)*vh2)
        + int2d(K)(eps^2*Aeps2*(VecteurproprelocK2*dy(VecteurproprelocKadjoint2)-VecteurproprelocKadjoint2*dy(VecteurproprelocK2))*dy(uh2)*vh2)
        
        + int1d(K)(tgv*uh1*vh1 + tgv*uh2*vh2); // Dirichlet boundary condition;
        
	matrix Aloc=defMS(VKVK,VKVK);
	set(Aloc, solver=UMFPACK);
	VH bc=0; //will hold the boundary condition for local problems

	VK[int] Phi11(3) ; VK[int] Phi12(3); //storage of local basis function contributions in the offline loop;
	VK[int] Phi21(3) ; VK[int] Phi22(3); //storage of local basis function contributions in the offline loop;	
	for (int i=0; i<3; i++) {

        VKVK [phi1,phi2];
        int dofi = VH(k,i); // the index in VH associated to vertex i of triangle k
		bc[][dofi] = 1;
		varf rhsloc([uh1,uh2],[vh1,vh2]) = int1d(K)(tgv*bc*vh1 + tgv*bc*vh2);
		real[int] Bloc = rhsloc(0,VKVK);

		phi1[] = Aloc^-1*Bloc;
		bc[][dofi]=0;

        if (debug){
            plot(phi1,wait=1,value=1,fill=1, cmm="fonction forme Chi 1");
			plot(phi2,wait=1,value=1,fill=1, cmm="fonction forme Chi 2");
        }

		int storei = 0;//indice pour la liste des fonctions Phieps, correspondant au i-Ã¨me sommet du k-iÃ¨me triangle
        if (recombinebool){
            storei = storeIndex(recombine(k,Ntri),i); //indice pour la liste des fonctions Phieps, correspondant au i-Ã¨me sommet du k-iÃ¨me triangle
        } else {
            storei = storeIndex(k,i); //indice pour la liste des fonctions Phieps, correspondant au i-Ã¨me sommet du k-iÃ¨me triangle
        }

		VK phi1Psieps1 = phi1*VecteurproprelocK1; 
        VK phi2Psieps2 = phi2*VecteurproprelocK2;

		Phi11[i][] = phi1Psieps1[];
		Phi22[i][] = phi2Psieps2[];
		Phi12[i][] = phi1Psieps1[]*0;
		Phi21[i][] = phi2Psieps2[]*0;

		if (debug){
			plot(Phi11[i],wait=1,value=1,fill=1, cmm="fonction forme Chi Psi 1");	
			plot(Phi22[i],wait=1,value=1,fill=1, cmm="fonction forme Chi Psi 2");		
		}
		phiEps11[storei][] = Phi11[i][]; // save basis functions for multiscale reconstruction below
		phiEps12[storei][] = Phi12[i][]; // save basis functions for multiscale reconstruction below
		phiEps21[storei][] = Phi21[i][]; // save basis functions for multiscale reconstruction below
		phiEps22[storei][] = Phi22[i][]; // save basis functions for multiscale reconstruction below

	}
	// Computation of matrix elements
	for (int j=0; j<3; j++)
	{ //loop over all corners for matrix contributions on K
		for (int i=0; i<3; i++) {
			// int ii = contr[i]; // seems superfluous ???
			// Find global DOF index for trial functions j and test function i,
			// compute matrix contributions,
			// save these in Imat[nnz], Jmat[nnz] and Mmat[nnz]
            if (recombinebool){
                Imat[nnz] = VH(recombine(k,Ntri),i);
			    Jmat[nnz] = VH(recombine(k,Ntri),j);
            } else {
                Imat[nnz] = VH(k,i);
			    Jmat[nnz] = VH(k,j);
            }

			Amat1[nnz] = int2d(K)(eps^2*a(Aeps1, Phi11[i], Phi11[j]));
			Amat2[nnz] = int2d(K)(eps^2*a(Aeps2, Phi22[i], Phi22[j]));

			Sigmamat11[nnz] = int2d(K)(sigmaeps1*Phi11[i]*Phi11[j]);
			Sigmamat12[nnz] = int2d(K)(sigmaeps2*Phi11[i]*Phi22[j]);
			Sigmamat21[nnz] = int2d(K)(sigmaeps3*Phi22[i]*Phi11[j]);
			Sigmamat22[nnz] = int2d(K)(sigmaeps4*Phi22[i]*Phi22[j]);

            Bmat1[nnz] = int2d(K)(Phi11[i]*Phi11[j]);
			Bmat2[nnz] = int2d(K)(Phi22[i]*Phi22[j]);
			nnz++;
		}
	}
	vk[][k]=0;

}
toc = clock();

if (SymetrieBool){
cout << "SymetrieCstx = " << SymetrieCstx << endl;
cout << "SymetrieCstxDenominateur = " << SymetrieCstxDenominateur << endl;
cout << "SymetrieCstx/SymetrieCstxDenominateur = " << SymetrieCstx/SymetrieCstxDenominateur << endl;
cout << "SymetrieCsty = " << SymetrieCsty << endl;
cout << "SymetrieCstyDenominateur = " << SymetrieCstyDenominateur << endl;
cout << "SymetrieCsty/SymetrieCstyDenominateur = " << SymetrieCsty/SymetrieCstyDenominateur << endl;
}

printmessage("Temps de construction des fonctions de forme : " << toc - tic << " secondes ");

///////////////////////////////////////////////////////////////////////
// Online stage                                                      //
///////////////////////////////////////////////////////////////////////

include "online_MsFEM.edp"

///////////////////////////////////////////////////////////////////////
// Reference solution and error computation                          //
///////////////////////////////////////////////////////////////////////

// Load or compute reference solution

include "post.edp"