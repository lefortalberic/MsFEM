// react_diff_P1.edp
//
// A FreeFEM++ script that shows the usual, intrusive MsFEM approach on a simple diffusion problem
//
// Note that this implementation is possible mainly due to the following in-depth functionality of FreeFEM++:
// - VK(k,i) gives the global degree of freedom of the ith local DOF in the kth triangle of the mesh

//mpirun -np 1 FreeFem++-mpi -wg main_react_diff_P1.edp -v 0
string nameMethod = "P1";

include "init.edp"

///////////////////////////////////////////////////////////////////////
// Online stage                                                      //
///////////////////////////////////////////////////////////////////////

// Problem
varf op ([uH1,uH2], [vH1,vH2])  
    = int2d(Th)(eps^2*a(Aeps1,uH1,vH1))
    + int2d(Th)(eps^2*a(Aeps2,uH2,vH2))
    + int2d(Th)((sigmaeps1*uH1 + sigmaeps2*uH2)*vH1
          +(sigmaeps3*uH1 + sigmaeps4*uH2)*vH2) 
    + on(1, 2, 3, 4, uH1=0)
    + on(1, 2, 3, 4, uH2=0)
    ;

varf b ([uH1,uH2], [vH1,vH2]) = int2d(Th)(uH1*vH1 + uH2*vH2); //no boundary condition

printmessage("Resolution du probleme aux valeurs propres approche")

tic = clock();

matrix<real> AH = op(VHVH, VHVH, factorize=1);
matrix<real> BH = b(VHVH, VHVH, solver=CG, eps=1e-20);

// important remark:
// the boundary condition is make with exact penalization:
// we put 1e30=tgv on the diagonal term of the lock degree of freedom.
// So take Dirichlet boundary condition just on $a$ variational form
// and not on $b$ variational form.
// because we solve $ w=OP^-1*B*v $

// Solve

Mat AHtemp = AH;
Mat BHtemp = BH;

real[int] ListelambdaH(1); //to store the nev eigenvalue
VHVH[int] [ListeVecteurpropreH1,ListeVecteurpropreH2](1); //to store the nev eigenvector

int k = EPSSolve(AHtemp, BHtemp, vectors = ListeVecteurpropreH1, values  = ListelambdaH, sparams = ssparams); //RÃ©solution du pb aux vp

k=min(k,1); // il arrive apparement qu'il n'y a pas que la 1ere vp renvoyee de cette fonction

real lambdaH = ListelambdaH[0]; //La fonction EPSSolve n'a l'air de vouloir que des vecteurs des valeurs propres et vectpropres
VH Vecteurpropremsfem1, Vecteurpropremsfem2;
Vecteurpropremsfem1 = ListeVecteurpropreH1[0];
Vecteurpropremsfem2 = ListeVecteurpropreH2[0];

VH absVecteurpropremsfem1 = abs(Vecteurpropremsfem1);
if (Vecteurpropremsfem1[].max/absVecteurpropremsfem1[].max<0.9)
{
    Vecteurpropremsfem1 = -Vecteurpropremsfem1;
}
VH absVecteurpropremsfem2 = abs(Vecteurpropremsfem2);
if (Vecteurpropremsfem2[].max/absVecteurpropremsfem2[].max<0.9)
{
    Vecteurpropremsfem2 = -Vecteurpropremsfem2;
}

// Renormalisation
real normeL2H=sqrt(int2d(TH)(Vecteurpropremsfem1*Vecteurpropremsfem1 + Vecteurpropremsfem2*Vecteurpropremsfem2));
Vecteurpropremsfem1[] = Vecteurpropremsfem1[]/normeL2H;
Vecteurpropremsfem2[] = Vecteurpropremsfem2[]/normeL2H;

toc = clock();

printmessage("Temps de resolution du probleme aux valeurs propres approche : " << toc - tic << " secondes ");
printmessage("lambda_" << nameMethod << " = " << lambdaH);

if (plots) plot(Vecteurpropremsfem1,wait=1,value=1,fill=1, cmm="solution approchee, methode P1");

Vh VecteurpropreHProjetee1 = Vecteurpropremsfem1;
Vh VecteurpropreHProjetee2 = Vecteurpropremsfem2;

///////////////////////////////////////////////////////////////////////
// Reference solution and error computation                          //
///////////////////////////////////////////////////////////////////////

// Load or compute reference solution

include "post.edp"