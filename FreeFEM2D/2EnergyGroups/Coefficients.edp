////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string ParameterDescription;

func real Ay1Function(real x, real y) {
    if (abs(NumCoeffDiff) == 1) {
        return (6+5*cos(2*pi*x)*sin(2*pi*y));
    }
    else if (abs(NumCoeffDiff) == 2) {
        return (6+5*cos(2*pi*(x+2*y))*sin(2*pi*(x-y)));
    }
    else if (abs(NumCoeffDiff) == 3) {
        return 5*sin((pi*x))*sin((pi*x))+1;
    }
    else if (abs(NumCoeffDiff) == 4) {
        return (6+4*cos(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y));
    }
    else if (abs(NumCoeffDiff) == 6) {
        return (6+5*cos(2*pi*(x+ sqrt(2)*y))*sin(2*pi*(sqrt(2)*x-y)));
    }
    else if (abs(NumCoeffDiff) == 7) {
        if ( 0.33333 <= x && x <= 0.66666 && 0.33333 <= y && y <= 0.66666) {
            return 10;
        }
        else {
            return 1;
        }
    }
    else if (abs(NumCoeffDiff) == 8) {
        real xprime = cos(-pi/6)*(x-0.5) - sin(-pi/6)*(y-0.5)+0.5; // rotation de -pi/6 autour de (0.5,0.5)
        real yprime = sin(-pi/6)*(x-0.5) + cos(-pi/6)*(y-0.5)+0.5;
        if ( 0.33333 <= xprime && xprime <= 0.66666 && 0.33333 <= yprime && yprime <= 0.66666) {
            return 10;
        }
        else {
            return 1;
        }
    }
    else if (abs(NumCoeffDiff) == 12) {
        return (6+5*cos(2*pi*(x-2*y))*sin(2*pi*(x-y)));
    }
    else if (abs(NumCoeffDiff) == 23) {
        return (6+5*cos(2*pi*(x+2*y))*sin(2*pi*(x-y)));
    }
    else {
        return 0;
    }
}

func real sigmay1Function(real x, real y) {
    if (abs(NumCoeffDiff) == 1) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi*x)*sin(2*pi*y)) ------ Sigmaeps = 18*(2+cos(2*pi*x)*sin(2*pi*y)) --";
        return 18*(2+cos(2*pi*x)*sin(2*pi*y));
    }
    else if (abs(NumCoeffDiff) == 2) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi*(x+2*y))*sin(2*pi*(x-y))) ------ Sigmaeps = 20*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)) --";
        return 25*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)));
    }
    else if (abs(NumCoeffDiff) == 3) {
        ParameterDescription = "-- Tests for Aeps = 5*sin((pi*x))*sin((pi*x))+2 ------ Sigmaeps = 20*(sin((pi*x))*sin((pi*x))+2) --";
        //return 9*(sin((2*pi*x))+2);
        return 10*cos((pi*x))*cos((pi*x))+1;
    }
    else if (abs(NumCoeffDiff) == 4) {
        ParameterDescription = "-- Tests for Aeps = (6+20*cos(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y)) ------ Sigmaeps = 18*(2+4*cos(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y)) --";
        return 22*(2+2*cos(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y));
    }
    else if (abs(NumCoeffDiff) == 6) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi*(x+ sqrt(2)*y))*sin(2*pi*(sqrt(2)*x-y)) ------ Sigmaeps = 23*(2+cos(2*pi*(x- sqrt(2)*y))*sin(2*pi*(sqrt(2)*x-y)) --";
        return (20*(2+cos(2*pi*(x- sqrt(2)*y))*sin(2*pi*(sqrt(2)*x-y))));
    }
    else if (abs(NumCoeffDiff) == 7) {
        ParameterDescription = "-- Tests for Aeps = 9*chi_{[1/3,2/3]}+1 ------ Sigmaeps = 9*chi_{[1/3,2/3]}+9 --";
        real Coeffmult = 1.8;
        if ( 0.33333 <= x && x <= 0.66666 && 0.33333 <= y && y <= 0.66666) {
            return Coeffmult*10;
        }
        else {
            return Coeffmult*5;
        }
    }
    else if (abs(NumCoeffDiff) == 8) {
        ParameterDescription = "-- Tests for Aeps = Rot(9*chi_{[1/3,2/3]}+1, pi/6) ------ Sigmaeps = Rot(9*chi_{[1/3,2/3]}+9, pi/6) --";
        real Coeffmult = 1.8;
        real xprime = cos(-pi/6)*(x-0.5) - sin(-pi/6)*(y-0.5)+0.5;
        real yprime = sin(-pi/6)*(x-0.5) + cos(-pi/6)*(y-0.5)+0.5;
        if ( 0.33333 <= xprime && xprime <= 0.66666 && 0.33333 <= yprime && yprime <= 0.66666) {
            return Coeffmult*10;
        }
        else {
            return Coeffmult*5;
        }
    }
    else if (abs(NumCoeffDiff) == 12) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi*(x-2*y))*sin(2*pi*(x-y))) ------ Sigmaeps = 15*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)) --";
        return 15*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)));
    }
    else if (abs(NumCoeffDiff) == 23) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi*(x+2*y))*sin(2*pi*(x-y))) ------ Sigmaeps = 35*(2+cos(2*pi*(x+2*y))*sin(2*pi*(x-y)) --";
        return 35*(2+cos(2*pi*(x+2*y))*sin(2*pi*(x-y)));
    }
    else {
        return 0;
    }
}

////////////////////////////////////////////////////////////////

func real Aeps1Function(real x, real y) {
    if (NumCoeffDiff == 1 || NumCoeffDiff == 2 || NumCoeffDiff == 3 || NumCoeffDiff == 4 || NumCoeffDiff == 7 || NumCoeffDiff == 8 || NumCoeffDiff == 12 || NumCoeffDiff == 23)
        return Ay1Function(x/eps-floor(x/eps),y/eps-floor(y/eps));
    else if (NumCoeffDiff == 6) {
        return Ay1Function(x/eps,y/eps);
    }
    else if(NumCoeffDiff == -1 || NumCoeffDiff == -2 || NumCoeffDiff == -3 || NumCoeffDiff == -4 || NumCoeffDiff == -7 || NumCoeffDiff == -8 || NumCoeffDiff == -12 || NumCoeffDiff == -23) {
        real xout; real xin = x;
        real yout; real yin = y;

        int indiceI = 2*floor(n*xin);
        int indiceJ = 2*floor(n*yin);

        if (yin == 1) {
            indiceJ = 2*(floor(n*yin)-1);
        }
        if (xin == 1) {
            indiceI = 2*(floor(n*xin)-1);
        }

        int Numtriangle = indiceI + n*indiceJ;

        real xbarycentre1 = xb[][Numtriangle];
        real ybarycentre1 = yb[][Numtriangle];
        real xbarycentre2 = xb[][Numtriangle+1];
        real ybarycentre2 = yb[][Numtriangle+1];

        real distance1 = sqrt((xin-xbarycentre1)*(xin-xbarycentre1) + (yin-ybarycentre1)*(yin-ybarycentre1));
        real distance2 = sqrt((xin-xbarycentre2)*(xin-xbarycentre2) + (yin-ybarycentre2)*(yin-ybarycentre2));
        if (distance1 > distance2) {
            Numtriangle = Numtriangle+1;
        }

        xout = xb[][recombine(Numtriangle, Ntri)] + (xin-xb[][Numtriangle]);
        yout = yb[][recombine(Numtriangle, Ntri)] + (yin-yb[][Numtriangle]);

        real out = Ay1Function(xout/eps-floor(xout/eps),yout/eps-floor(yout/eps));
        return out;
    }
    else if (NumCoeffDiff == 5) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi/eps*x*x)*sin(2*pi/eps*y*y)) ------ Sigmaeps = 20*(2+cos(2*pi/eps*x*x)*sin(2*pi/eps*y*y)) --";
        //return 1;
        return 6+5*cos(2*pi/eps*x*x)*sin(2*pi/eps*y*y);
    }
    else if (NumCoeffDiff == 9) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-(sqrt(3)/3)*y))*sin(pi/eps*(x-(sqrt(3)/3)*y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-(sqrt(3)/3)*y))*sin(pi/eps*(x-(sqrt(3)/3)*y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 5*sin(pi/eps*(x-(sqrt(3)/3)*y))*sin(pi/eps*(x-(sqrt(3)/3)*y))+2;
    }
    else if (NumCoeffDiff == 10) {
        ParameterDescription = "-- Tests for Aeps = 5+1.25*((cos(2*pi/eps*x)+cos(2*sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(2)*pi/eps*y))) ------ Sigmaeps = 40*(2+0.25*((cos(2*pi/eps*x)+cos(2*sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(2)*pi/eps*y)))) --";
        return (5+1.25*((cos(2*pi/eps*x)+cos(2*sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(2)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 11) {
        ParameterDescription = "-- Tests for Aeps = Sudoku pseudo-alea : 1-->10 ------ Sigmaeps = Sudoku pseudo-alea : 10-->26 --";
        int i = floor(x/eps)+1;
        int j = floor(y/eps)+1;
        int seed = i * 7 + j * 3; // Utilisation de nombres premiers pour r√©duire les collisions
        randinit(seed);
        real r = floor(10*randreal1());
        return (1 + r);
    }
    else if (NumCoeffDiff == 13) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-tan(pi/18)*y))*sin(pi/eps*(x-tan(pi/18)*y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-tan(pi/18)*y))*sin(pi/eps*(x-tan(pi/18)*y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 5*sin(pi/eps*(x-0.17632*y))*sin(pi/eps*(x-0.17632*y))+2; //Tournes de 10degres
    }
    else if (NumCoeffDiff == 14) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-tan(pi/9)*y))*sin(pi/eps*(x-tan(pi/9)*y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-tan(pi/9)*y))*sin(pi/eps*(x-tan(pi/9)*y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 5*sin(pi/eps*(x-0.36397*y))*sin(pi/eps*(x-0.36397*y))+2; //Tournes de 20degres
    }
    else if (NumCoeffDiff == 15) {
        ParameterDescription = "-- Tests for Aeps = 5+1.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y))) ------ Sigmaeps = 40*(2+0.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y)))) --";
        return (5+1.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 16) {
        ParameterDescription = "-- Tests for Aeps = 5+1.25*((cos(2*pi/eps*(x-tan(pi/18)*y))+cos(2*sqrt(2)*pi/eps*(x-tan(pi/18)*y)))*(sin(2*pi/eps*(x+tan(pi/9)*y))+ sin(2*sqrt(2)*pi/eps*(x+tan(pi/9)*y))))" + " ------ Sigmaeps = 40*(1-0.2*(x-0.5)*(x-0.5))*(2+0.18*((cos(2*pi/eps*(x-tan(pi/18)*y))+cos(2*sqrt(2)*pi/eps*(x-tan(pi/18)*y)))*(sin(2*pi/eps*(x+tan(pi/9)*y))+ sin(2*sqrt(2)*pi/eps*(x+tan(pi/9)*y))))) --";
        return (5+1.25*((cos(2*pi/eps*(x-0.17632*y))+cos(2*sqrt(2)*pi/eps*(x-0.17632*y)))*(sin(2*pi/eps*(y+0.36397*x))+ sin(2*sqrt(2)*pi/eps*(y+0.36397*x)))));
    }
    else if (NumCoeffDiff == 17) {
        ParameterDescription = "-- Tests for Aeps = 5+1.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y)))" + " ------ Sigmaeps = 40*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)) --";
        return (5+1.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 18) {
        ParameterDescription = "-- Tests for Aeps = 6+5*cos(2*pi*(x+2*y))*sin(2*pi*(x-y))" + " ------ Sigmaeps = 40*(2+0.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y)))) --";
        return (6+5*cos(2*pi/eps*(x+2*y))*sin(2*pi/eps*(x-y)));
    }
    else if (NumCoeffDiff == 19) {
        ParameterDescription = "-- Tests for Aeps = (6+5*cos(2*pi/eps*x*x)*sin(2*pi/eps*y*y)) ------ Sigmaeps = 20*(2+cos(2*pi/eps*x*x)*sin(2*pi/eps*y*y)) --";
        //return 1;
        return (6+5*cos(2*pi/eps*(x-2*y))*sin(2*pi/eps*(x-y)));
    }
    else if (NumCoeffDiff == 20) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-y))*sin(pi/eps*(x-y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-y))*sin(pi/eps*(x-y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 5*sin(pi/eps*(x-y))*sin(pi/eps*(x-y))+2; //Tournes de 45degres
    }
    else if (NumCoeffDiff == 21) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-tan(pi/36)*y))*sin(pi/eps*(x-tan(pi/36)*y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-tan(pi/36)*y))*sin(pi/eps*(x-tan(pi/36)*y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 5*sin(pi/eps*(x-0.087488*y))*sin(pi/eps*(x-0.087488*y))+2; //Tournes de 5degres
    }
    else if (NumCoeffDiff == 22) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-tan(0.12)*y))*sin(pi/eps*(x-tan(0.12)*y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-tan(0.12)*y))*sin(pi/eps*(x-tan(0.12)*y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 5*sin(pi/eps*(x-0.12*y))*sin(pi/eps*(x-0.12*y))+2; //Tournes de 6,84 degres
    }
    else if (NumCoeffDiff == 23) {
        ParameterDescription = "-- Tests for Aeps = 5*sin(pi/eps*(x-tan(0.12)*y))*sin(pi/eps*(x-tan(0.12)*y))+2 ------ Sigmaeps = 20*(sin(pi/eps*(x-tan(0.12)*y))*sin(pi/eps*(x-tan(0.12)*y))+2) --";
        //return 5*sin(2*pi/eps*(x-(sqrt(3)/3)*y))+6;
        return 1; //Tournes de 6,84 degres
    }
    else {
        return 0;
    }
}
func real sigmaeps1Function(real x, real y) {
    if (NumCoeffDiff == 1 || NumCoeffDiff == 2 || NumCoeffDiff == 3 || NumCoeffDiff == 4 || NumCoeffDiff == 7 || NumCoeffDiff == 8 || NumCoeffDiff == 12 || NumCoeffDiff == 23)
        return sigmay1Function(x/eps-floor(x/eps),y/eps-floor(y/eps));
    else if (NumCoeffDiff == 6) {
        return sigmay1Function(x/eps,y/eps);
    }
    else if(NumCoeffDiff == -1 || NumCoeffDiff == -2 || NumCoeffDiff == -3 || NumCoeffDiff == -4 || NumCoeffDiff == -7 || NumCoeffDiff == -8 || NumCoeffDiff == -12 || NumCoeffDiff == -23) {
        real xout; real xin = x;
        real yout; real yin = y;

        int indiceI = 2*floor(n*xin);
        int indiceJ = 2*floor(n*yin);

        if (yin == 1) {
            indiceJ = 2*(floor(n*yin)-1);
        }
        if (xin == 1) {
            indiceI = 2*(floor(n*xin)-1);
        }

        int Numtriangle = indiceI + n*indiceJ;

        real xbarycentre1 = xb[][Numtriangle];
        real ybarycentre1 = yb[][Numtriangle];
        real xbarycentre2 = xb[][Numtriangle+1];
        real ybarycentre2 = yb[][Numtriangle+1];

        real distance1 = sqrt((xin-xbarycentre1)*(xin-xbarycentre1) + (yin-ybarycentre1)*(yin-ybarycentre1));
        real distance2 = sqrt((xin-xbarycentre2)*(xin-xbarycentre2) + (yin-ybarycentre2)*(yin-ybarycentre2));
        if (distance1 > distance2) {
            Numtriangle = Numtriangle+1;
        }

        xout = xb[][recombine(Numtriangle, Ntri)] + (xin-xb[][Numtriangle]);
        yout = yb[][recombine(Numtriangle, Ntri)] + (yin-yb[][Numtriangle]);

        real out = sigmay1Function(xout/eps-floor(xout/eps),yout/eps-floor(yout/eps));
        return out;
    }
    else if (NumCoeffDiff == 5) {
        return 10*(2+cos(2*pi/eps*x*x)*sin(2*pi/eps*y*y));
    }
    else if (NumCoeffDiff == 9) {
        //return 9*(sin(2*pi/eps*(x-(sqrt(3)/3)*y))+2);
        return 20*(sin(pi/eps*(x-(sqrt(3)/3)*y))*sin(pi/eps*(x-(sqrt(3)/3)*y))+2);
    }
    else if (NumCoeffDiff == 10) {
        return 50*(2+0.25*((cos(2*pi/eps*x)+cos(2*sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(2)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 11) {
        int i = floor(x/eps)+1;
        int j = floor(y/eps)+1;
        int seed = i * 11 + j * 23; // Utilisation de nombres premiers pour r√©duire les collisions
        randinit(seed);
        real r = floor(17*randreal1());
        return (10 + r);
    }
    else if (NumCoeffDiff == 13) {
        return 20*(sin(pi/eps*(x-0.17632*y))*sin(pi/eps*(x-0.17632*y))+2); //Tournes de 10degres
    }
    else if (NumCoeffDiff == 14) {
        return 20*(sin(pi/eps*(x-0.36397*y))*sin(pi/eps*(x-0.36397*y))+2); //Tournes de 20degres
    }
    else if (NumCoeffDiff == 15) {
        return 40*(2+0.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 16) {
        return 40*(1-0.2*(x-0.5)*(x-0.5))*(2+0.18*((cos(2*pi/eps*(x-0.17632*y))+cos(2*sqrt(2)*pi/eps*(x-0.17632*y)))*(sin(2*pi/eps*(y+0.36397*x))+ sin(2*sqrt(2)*pi/eps*(y+0.36397*x)))));
    }
    else if (NumCoeffDiff == 17) {
        return 40*(2+cos(2*pi/eps*(x+2*y))*sin(2*pi/eps*(x-y)));
    }
    else if (NumCoeffDiff == 18) {
        return 42*(2+0.25*((cos(2*pi/eps*x)+cos(2*(pi*pi/6)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*(pi*pi/6)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 19) {
        return 20*(2+cos(2*pi/eps*(x-2*y))*sin(2*pi/eps*(x-y)));
    }
    else if (NumCoeffDiff == 20) {
        return 20*(sin(pi/eps*(x-y))*sin(pi/eps*(x-y))+2); //Tournes de 45degres
    }
    else if (NumCoeffDiff == 21) {
        return 20*(sin(pi/eps*(x-0.087488*y))*sin(pi/eps*(x-0.087488*y))+2); //Tournes de 5degres
    }
    else if (NumCoeffDiff == 23) {
        return 40*(2+0.25*((cos(2*pi/eps*x)+cos(2*sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(2)*pi/eps*y)))); //Tournes de 6,84degres
    }
    else {
        return 0;
    }
}

Vh Ay1 = Ay1Function(x,y); Vh sigmay1 = sigmay1Function(x,y); 
Vh Aeps1 = Aeps1Function(x,y); Vh sigmaeps1 = sigmaeps1Function(x,y);

////////////////////////////////////////////////////////////////


real SigmaMean = 0.8*(int2d(Th)(sigmaeps1(x,y))/int2d(Th)(1)); //0.8 est ici une valeur empirique (√† changer ?
//de sorte que sigmamean<lambdaref 


////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//Meme chose pour les autres coeffs
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

func real Ay2Function(real x, real y) {
    if (NumCoeffDiff == 1) {
        return (4+3*sin(2*pi*(x+2*y))*cos(2*pi*(x-y)));
    }
    else if (NumCoeffDiff == 2) {
        return (4+3*sin(2*pi*(x+2*y))*cos(2*pi*(x-y)));
    }
    else if (NumCoeffDiff == 3) {
        return 5*cos((pi*x))*cos(pi*(x))+1;
    }
    else if (NumCoeffDiff ==4) {
        return (4+5*sin(pi*x)*cos(pi*y)*sin(pi*x)*cos(pi*y));
    }

}

func real sigmay2Function(real x, real y) {
    if (NumCoeffDiff == 1) {
        return -10*sin((pi*x))*sin((pi*x))-1;
    }
    else if (NumCoeffDiff == 2) {
        return -2*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)));
    }
    else if (NumCoeffDiff == 3) {
        return -2*sin((pi*x))*sin((pi*x))-1;
    }
    else if (NumCoeffDiff == 4) {
        return -2*sin(pi*x)*sin(pi*x)*cos(pi*y)*cos(pi*y)-1;
    }
}

////////////////////////////////////////////////////////////////

func real Aeps2Function(real x, real y) {

    if (NumCoeffDiff == 1 || NumCoeffDiff == 2 || NumCoeffDiff == 3 || NumCoeffDiff == 4) {
        return Ay2Function(x/eps-floor(x/eps),y/eps-floor(y/eps));
    }
    else if (NumCoeffDiff == 10) {
        return 0.62*(5+1.25*((cos(2*pi/eps*x)+cos(sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(sqrt(2)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 13) {
        return 5*sin(pi/eps*(x-0.17632*y))*sin(pi/eps*(x-0.17632*y))+2; //Tournes de 10degres
    }
}

func real sigmaeps2Function(real x, real y) {

    if (NumCoeffDiff == 1 || NumCoeffDiff == 2 || NumCoeffDiff == 3 || NumCoeffDiff == 4) {
        return sigmay2Function(x/eps-floor(x/eps),y/eps-floor(y/eps));
    }
    else if (NumCoeffDiff == 10) {
        return -3*(2+0.25*((cos(2*pi/eps*x)+cos(2*sqrt(2)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(2)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 13) {
        return 20*(sin(pi/eps*(x-0.17632*y))*sin(pi/eps*(x-0.17632*y))+2); //Tournes de 10degres
    }
}

Vh Ay2 = Ay2Function(x,y); Vh sigmay2 = sigmay2Function(x,y); 
Vh Aeps2 = Aeps2Function(x,y); Vh sigmaeps2 = sigmaeps2Function(x,y);

////////////////////////////////////////////////////////////////

func real sigmay3Function(real x, real y) {
    if (NumCoeffDiff == 1) {
        return -5*cos((pi*x) + pi/4)*cos((pi*x)+ pi/4)-1;
    }
    else if (NumCoeffDiff == 2) {
        return -12*(2+cos(2*pi*(x-2*y))*sin(2*pi*(x-y)));
    }
    else if (NumCoeffDiff == 3) {
        return -5*cos((pi*x))*cos((pi*x))-1;
    }
    else if (NumCoeffDiff == 4) {
        return -5*sin(pi*x)*sin(pi*x)*cos(pi*y)*cos(pi*y)-1;
    }
}

func real sigmaeps3Function(real x, real y) {

    if (NumCoeffDiff == 1 || NumCoeffDiff == 2 || NumCoeffDiff == 3 || NumCoeffDiff == 4) {
        return sigmay3Function(x/eps-floor(x/eps),y/eps-floor(y/eps));
    }
    else if (NumCoeffDiff == 10) {
        return -2*(2+0.25*((cos(2*pi/eps*x)+cos(2*sqrt(3)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(2*sqrt(3)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 13) {
        return 20*(sin(pi/eps*(x-0.17632*y))*sin(pi/eps*(x-0.17632*y))+2); //Tournes de 10degres
    }
}
Vh sigmay3 = sigmay3Function(x,y); 
Vh sigmaeps3 = sigmaeps3Function(x,y);

////////////////////////////////////////////////////////////////

func real sigmay4Function(real x, real y) {
    if (NumCoeffDiff == 1) {
        return 20*(2+cos(2*pi*(x-2*y))*cos(2*pi*(x-y)));
    }
    else if (NumCoeffDiff == 2) {
        return 20*(2+cos(2*pi*(x-2*y))*cos(2*pi*(x-y)));
    }
    else if (NumCoeffDiff == 3) {
        return 8*cos((pi*x))*cos((pi*x))+1;
    }
    else if (abs(NumCoeffDiff) == 4) {
        return 8*(2+1*cos(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y));
    }
}

func real sigmaeps4Function(real x, real y) {

    if (NumCoeffDiff == 1 || NumCoeffDiff == 2 || NumCoeffDiff == 3 || NumCoeffDiff == 4) {
        return sigmay4Function(x/eps-floor(x/eps),y/eps-floor(y/eps));
    }
    else if (NumCoeffDiff == 10) {
        return 45*(2+0.25*((cos(2*pi/eps*x)+cos(1.5*sqrt(5)*pi/eps*x))*(sin(2*pi/eps*y)+ sin(1.5*sqrt(5)*pi/eps*y))));
    }
    else if (NumCoeffDiff == 13) {
        return 20*(sin(pi/eps*(x-0.17632*y))*sin(pi/eps*(x-0.17632*y))+2); //Tournes de 10degres
}
}
Vh sigmay4 = sigmay4Function(x,y);
Vh sigmaeps4 = sigmaeps4Function(x,y);

////////////////////////////////////////////////////////////////

