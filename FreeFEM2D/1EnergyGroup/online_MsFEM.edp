
///////////////////////////////////////////////////////////////////////
// Online stage                                                      //
///////////////////////////////////////////////////////////////////////

tic = clock();

// Define global matrix and add boundary conditions to the system by penalization
matrix Amsfem = [Imat(0:nnz-1), Jmat(0:nnz-1), Amat(0:nnz-1)];
matrix Bmsfem = [Imat(0:nnz-1), Jmat(0:nnz-1), Bmat(0:nnz-1)];

varf boundarycondition(u,v) = int1d(TH)(tgv*u*v);
matrix Abc = boundarycondition(VH,VH);
matrix Aglob = Amsfem+Abc;

Mat Amsfemtemp = Aglob;
Mat Bmsfemtemp = Bmsfem;

real[int] Listelambdamsfem(NumberEigenValue); //to store the nev eigenvalue
VH[int] ListeVecteurpropremsfem(NumberEigenValue); //to store the nev eigenvector

int kmsfem = EPSSolve(Amsfemtemp, Bmsfemtemp, vectors = ListeVecteurpropremsfem, values  = Listelambdamsfem, sparams = ssparams); //Résolution du pb aux vp
kmsfem=min(kmsfem,NumberEigenValue); // il arrive apparement qu'il n'y a pas que la 1ere vp renvoyee de cette fonction

real lambdaH = Listelambdamsfem[NumberEigenValue-1]; //La fonction EPSSolve n'a l'air de vouloir que des vecteurs des valeurs propres et vectpropres
VH Vecteurpropremsfem;
Vecteurpropremsfem[] = ListeVecteurpropremsfem[NumberEigenValue-1][];

VH absVecteurpropremsfem = abs(Vecteurpropremsfem);
if (Vecteurpropremsfem[].max/absVecteurpropremsfem[].max<0.9)
{
    Vecteurpropremsfem = -Vecteurpropremsfem;
}

toc = clock();

printmessage("Temps de resolution online du probleme MsFEM : " << toc - tic << " secondes ");
printmessage("lambda_MsFEM_" << nameMethod << " = " << lambdaH);

///////////////////////////////////////////////////////////////////////
// Reconstruction of the MsFEM solution on the fine scale            //
///////////////////////////////////////////////////////////////////////
printmessage("Reconstruction of the MsFEM solution on the fine scale");
tic = clock();

if (plots) {

    int l = 12;
    Vh Fctforme;
    VH choixNoeud=0;
    choixNoeud[][l]=1;
    for (int k=0; k<Ntri; k++)
    {// Loop over all elements to reuse the multiscale information of the offline stage
        vk[][k]=1;
        int[int] n2oFine;
        mesh Kh=trunc(Th, vk>0.5, split=1, new2old=n2oFine); //mesh for the resolution of MsFEM solution
        fespace VK(Kh,P1);
        int[int] loc2globFine = restrict(VK, Vh, n2oFine);
        
        real[int] uhloc(VK.ndof);
        for (int i=0; i<3; i++) {
            int dofi = VH(k,i);
            int storei = storeIndex(k,i);
            uhloc += choixNoeud[][dofi]*phiEps[storei][];
        }
        
        Fctforme[](loc2globFine) = uhloc; // Etant donné que on met ici "=" et non "+=", On perd des informations sur les bords
        // Mais on ne peut pas mettre "+=" directement, car dans ce cas les valeurs au bord s'ajouteraient.
            
        vk[][k]=0;
    }
    plot(TH, Fctforme, fill=1, value=1, wait=1, cmm="Exemple de fonction de forme");
}

if (debug) {

    for (int l=0; l<VH.ndof; l++)
    {
        Vh Fctforme;
        VH choixNoeud=0;
        choixNoeud[][l]=1;
        for (int k=0; k<Ntri; k++)
        {// Loop over all elements to reuse the multiscale information of the offline stage
            vk[][k]=1;
            int[int] n2oFine;
            mesh Kh=trunc(Th, vk>0.5, split=1, new2old=n2oFine); //mesh for the resolution of MsFEM solution
            fespace VK(Kh,P1);
            int[int] loc2globFine = restrict(VK, Vh, n2oFine);
            
            real[int] uhloc(VK.ndof);
            for (int i=0; i<3; i++) {
                int dofi = VH(k,i);
                int storei = storeIndex(k,i);
                uhloc += choixNoeud[][dofi]*phiEps[storei][];
            }
            
            Fctforme[](loc2globFine) = uhloc; // Etant donné que on met ici "=" et non "+=", On perd des informations sur les bords
            // Mais on ne peut pas mettre "+=" directement, car dans ce cas les valeurs au bord s'ajouteraient.
                
            vk[][k]=0;
        }
        plot(TH, Fctforme, fill=1, value=1, wait=1, cmm="Exemple de fonction de forme");
    }
}

Vh VecteurpropreHProjetee=0; //multiscale solution
for (int k=0; k<Ntri; k++)
{// Loop over all elements to reuse the multiscale information of the offline stage
	vk[][k]=1;
	int[int] n2oFine;
	mesh Kh=trunc(Th, vk>0.5, split=1, new2old=n2oFine); //mesh for the resolution of MsFEM solution
	fespace VK(Kh,P1);
	int[int] loc2globFine = restrict(VK, Vh, n2oFine);
	
	real[int] uhloc(VK.ndof);
	for (int i=0; i<3; i++) {
		int dofi = VH(k,i);
		int storei = storeIndex(k,i);
		uhloc += Vecteurpropremsfem[][dofi]*phiEps[storei][];
	}
	
	VecteurpropreHProjetee[](loc2globFine) = uhloc; // Etant donné que on met ici "=" et non "+=", On perd des informations sur les bords
    // Mais on ne peut pas mettre "+=" directement, car dans ce cas les valeurs au bord s'ajouteraient.
    	
	vk[][k]=0;
}

// Stockage des fonctions de formes, et de la solution MsFEM du maillage grossier
if (CompareMsFEMMsFEMrecombined)
{
    printmessage("Stockage des fonctions de formes, et de la solution MsFEM du maillage grossier");
    for(int i=0; i<phiEps.n; i++)
    {
        string FonctionsFormeMsfem = "./Fonctions_forme/fct_forme_numero_"+ i + "_MsFEM" + parametersMsFEM + ".txt";
        ofstream ff(FonctionsFormeMsfem);
        ff << phiEps[i][] << endl;
        ff << endl;
    }

    string VecteurpropreHMsfem = "./Fonctions_forme/VecteurpropreHMsFEM" + parametersMsFEM + ".txt";
    ofstream ff(VecteurpropreHMsfem);
    ff << Vecteurpropremsfem[] << endl;
    ff << endl;
}


// Renormalisation
real normeL2msfem=sqrt(int2d(Th)(VecteurpropreHProjetee*VecteurpropreHProjetee));
VecteurpropreHProjetee[] = VecteurpropreHProjetee[]/normeL2msfem;
Vecteurpropremsfem[] = Vecteurpropremsfem[]/normeL2msfem;

toc = clock();
printmessage("Temps de reconstruction of the MsFEM solution on the fine scale : " << toc - tic << " secondes ");

if (plots) plot(VecteurpropreHProjetee, fill=1, value=1, wait=1, cmm="MsFEM solution (fine mesh)");
