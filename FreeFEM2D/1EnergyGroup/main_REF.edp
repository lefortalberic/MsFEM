// Compute reference solution for MsFEM tests
// run with   mpirun -np 1 FreeFem++-mpi -wg main_REF.edp -v 0


cout <<""<<endl;

string nameMethod = "REF";

include "init.edp" // defines bilinear form, RHS, global P1 space Vh on the fine mesh

printmessage("Debut de la methode " + nameMethod + " avec les parametres " + parametersREF);

///////////////////////////////////////////////////////////////////////
// Reference solution and error computation                          //
///////////////////////////////////////////////////////////////////////

// Load or compute reference solution
//tic = clock();
tic = clock();

Vh Vecteurpropreref;
real lambdaref;

// Problem
varf opref (uref, vh)
    = int2d(Th)(
          sigmaepsrecombine*uref*vh)
    + int2d(Th)(eps^2*a(Aepsrecombine,uref,vh))

    + on(1, 2, 3, 4, uref=0)
    ;

varf bref (uref, vh) = int2d(Th)(uref*vh); //no boundary condition

matrix<real> Aref = opref(Vh, Vh, factorize=1); 
matrix<real> Bref = bref(Vh, Vh, solver=CG, eps=1e-20);

Mat Areftemp = Aref;
Mat Breftemp = Bref;

real[int] Listelambdaref(NumberEigenValue); //to store the nev eigenvalue (nev = 1 ici)
Vh[int] ListeVecteurpropreref(NumberEigenValue); //to store the nev eigenvector


int kref = EPSSolve(Areftemp, Breftemp, vectors = ListeVecteurpropreref, values  = Listelambdaref, sparams = ssparams); //RÃ©solution du pb aux vp
kref=min(kref,NumberEigenValue);

toc = clock();

lambdaref = Listelambdaref[NumberEigenValue-1]; //La fonction EPSSolve n'a l'air de vouloir que des vecteurs des valeurs propres et vectpropres

Vecteurpropreref[] = ListeVecteurpropreref[NumberEigenValue-1][];


Vh absVecteurpropreref = abs(Vecteurpropreref);
if (Vecteurpropreref[].max/absVecteurpropreref[].max<0.9)
{
    Vecteurpropreref = -Vecteurpropreref;
}

// Renormalisation
real normeL2ref=sqrt(int2d(Th)(Vecteurpropreref*Vecteurpropreref));
Vecteurpropreref[] = Vecteurpropreref[]/normeL2ref;

//toc = clock();

printmessage("Temps de calcul de la solution de reference : " << toc - tic << " secondes ");
printmessage("lambda_" << nameMethod << " = " << lambdaref);

if (plots) plot(Vecteurpropreref,wait=1,value=1,fill=1, cmm="Solution de reference");


{
    string solname = "./Solutions_reference/sol_" + nameMethod + parametersREF + ".txt";
    ofstream ff(solname);
    ff << Vecteurpropreref[] << endl;
    ff << endl;
}

{
    string solname2 = "./Solutions_reference/VP_" + nameMethod + parametersREF + ".txt";
    ofstream ff(solname2);
    ff << lambdaref << endl;
    ff << endl;
}
printmessage("////////////////////////////////////////////////////////////////");