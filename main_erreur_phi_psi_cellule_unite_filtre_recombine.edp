//mpirun -np 1 FreeFem++-mpi -wg main_erreur_phi_psi_cellule_unite_filtre_recombine.edp -v 0


string nameMethod = "Psi_Phi_carre_filtre";

include "init.edp"
///////////////////////////////////////////////////////////////////////
// Define internal data structures                                   //
///////////////////////////////////////////////////////////////////////

////////// Diffusion coefficient //////////

/* func Aeps = 6+5*cos(2*(pi/eps)*(x+2*y))*sin(2*(pi/eps)*(x-y));

func Ay =6+5*cos(2*pi*(x+2*y))*sin(2*pi*(x-y));

func Aeps = 6+5*sin(2*(pi/eps)*x);

func Ay =6+5*sin(2*pi*x);

func sigmaeps = 20*(sin((pi*x)/eps)*sin((pi*x)/eps)+2);

func sigmay = 20*(sin((pi*x))*sin((pi*x))+2);

//func FiltrePhi= 1;
func FiltrePhi= (1-x)*(1-x)*x*x*(1-y)*(1-y)*y*y*900;
//////////////////////////////////////////////////////////////// */
// with Filtrage
varf oploc (u, v)
        = int2d(Th)(
            FiltrePhi*sigmaeps(x,y)*u*v)
        + int2d(Th)(eps^2*FiltrePhi*a(Aeps(x,y),u,v))
        ;

varf bloc (u, v) = int2d(Th)(FiltrePhi*u*v); //no boundary condition


varf CLXfiltreloc (unused, v)
    = int2d(Th)(FiltrePhi*1*dx(v)) 
    ;

varf CLYfiltreloc (unused, v)
    = int2d(Th)(FiltrePhi*1*dy(v)) 
    ;

real[int] CLXfiltreloclocS1 = CLXfiltreloc(0, Vh);
real[int] CLYfiltreloclocS1 = CLYfiltreloc(0, Vh);

real[int] Zeros = 0*CLXfiltreloclocS1;

matrix AlocS = oploc(Vh, Vh, factorize=1); 
matrix BlocS = bloc(Vh, Vh, solver=CG, eps=1e-20);

matrix AlocStmp(AlocS.n+2,AlocS.m+2);
matrix BlocStmp(BlocS.n+2,BlocS.m+2);
AlocStmp = [ [AlocS , CLXfiltreloclocS1 , CLYfiltreloclocS1] , [CLXfiltreloclocS1' , 0, 0] , [CLYfiltreloclocS1' , 0 ,0] ];
BlocStmp = [ [BlocS , Zeros, Zeros ] , [Zeros' , 0, 0 ] , [Zeros' , 0 , 0] ];

real[int] Listelambdaloc(1); //to store the nev eigenvalue (nev = 1 ici)
real[int,int] ListeVecteurproprelocS(AlocStmp.n,1) ; //to store the nev eigenvector

Mat Aloctemp = AlocStmp;
Mat Bloctemp = BlocStmp;

//int kloc = EPSSolve(Bloctemp, Aloctemp, values=Listelambdaloc , array=ListeVecteurproprelocS, sparams= "-eps_type lapack"); //Résolution du pb aux vp
int kloc = EPSSolve(Aloctemp, Bloctemp, values=Listelambdaloc , array=ListeVecteurproprelocS, sparams= ssparamsfiltre); //Résolution du pb aux vp
kloc=min(kloc,1);

cout << "VP" << kloc << " = " << Listelambdaloc(0) << endl;
Vh VecteurproprelocS;

VecteurproprelocS[](0:VecteurproprelocS.n-1) = ListeVecteurproprelocS(0:VecteurproprelocS.n-1,0);
real LagrangeMultiplier1 = ListeVecteurproprelocS(VecteurproprelocS.n,0);
real LagrangeMultiplier2 = ListeVecteurproprelocS(VecteurproprelocS.n+1 ,0);

cout << "LagrangeMultiplier1 = " << LagrangeMultiplier1 << endl;
cout << "LagrangeMultiplier2 = " << LagrangeMultiplier2 << endl;

if (VecteurproprelocS(Lx/2 , Ly/2)<0)  //Evaluation au point milieu
{
    VecteurproprelocS = -VecteurproprelocS;
}

// Renormalisation
real normeL2VecteurproprelocS=sqrt(int2d(Th)(VecteurproprelocS*VecteurproprelocS));
VecteurproprelocS[] = VecteurproprelocS[]/normeL2VecteurproprelocS;





///////////////////////////////////////////////////////////////////////
varf oplocrecombine (u, v)
        = int2d(Th)(
            FiltrePhi*sigmaepsrecombine(x,y)*u*v)
        + int2d(Th)(eps^2*FiltrePhi*a(Aepsrecombine(x,y),u,v))
        ;

matrix AlocSrecombine = oplocrecombine(Vh, Vh, factorize=1); 
matrix AlocStmprecombine(AlocSrecombine.n+2,AlocSrecombine.m+2);

AlocStmprecombine = [ [AlocSrecombine , CLXfiltreloclocS1 , CLYfiltreloclocS1] , [CLXfiltreloclocS1' , 0, 0] , [CLYfiltreloclocS1' , 0 ,0] ];

real[int] Listelambdalocrecombine(1); //to store the nev eigenvalue (nev = 1 ici)
real[int,int] ListeVecteurproprelocSrecombine(AlocStmprecombine.n,1) ; //to store the nev eigenvector

Mat Aloctemprecombine = AlocStmprecombine;

//int kloc = EPSSolve(Bloctemp, Aloctemp, values=Listelambdaloc , array=ListeVecteurproprelocS, sparams= "-eps_type lapack"); //Résolution du pb aux vp
int klocrecombine = EPSSolve(Aloctemprecombine, Bloctemp, values=Listelambdalocrecombine , array=ListeVecteurproprelocSrecombine, sparams= ssparamsfiltre); //Résolution du pb aux vp
klocrecombine=min(klocrecombine,1);

cout << "VP" << klocrecombine << " = " << Listelambdaloc(0) << endl;
Vh VecteurproprelocSrecombine;

VecteurproprelocSrecombine[](0:VecteurproprelocSrecombine.n-1) = ListeVecteurproprelocSrecombine(0:VecteurproprelocSrecombine.n-1,0);
real LagrangeMultiplier1recombine = ListeVecteurproprelocSrecombine(VecteurproprelocSrecombine.n,0);
real LagrangeMultiplier2recombine = ListeVecteurproprelocSrecombine(VecteurproprelocSrecombine.n+1 ,0);

if (VecteurproprelocSrecombine(Lx/2 , Ly/2)<0)  //Evaluation au point milieu
{
    VecteurproprelocSrecombine = -VecteurproprelocSrecombine;
}

// Renormalisation
real normeL2VecteurproprelocSrecombine=sqrt(int2d(Th)(VecteurproprelocSrecombine*VecteurproprelocSrecombine));
VecteurproprelocSrecombine[] = VecteurproprelocSrecombine[]/normeL2VecteurproprelocSrecombine;
///////////////////////////////////////////////////////////////////////


if (plots){ plot(VecteurproprelocS, fill=1, value=1, cmm="Premier vecteur propre", wait=1);}
if (plots){ plot(VecteurproprelocSrecombine, fill=1, value=1, cmm="Premier vecteur propre recombine", wait=1);}

///////////////////////////////////////////////////////////////////////
// Compute the error                                                //
Vh e=0;
Vh erreurH1 = 0;
e[] = VecteurproprelocS[] - VecteurproprelocSrecombine[];
erreurH1 = dx(e)*dx(e) + dy(e)*dy(e) + e*e;

real eH1int = int2d(Th)(dx(e)*dx(e)+dy(e)*dy(e) + e*e)/ int2d(Th)(dx(VecteurproprelocSrecombine)*dx(VecteurproprelocSrecombine)+dy(VecteurproprelocSrecombine)*dy(VecteurproprelocSrecombine) + VecteurproprelocSrecombine*VecteurproprelocSrecombine);
cout << "eH1_Omega = " << sqrt(eH1int) << endl;


if (plots){ plot(e, fill=1, value=1, cmm="Erreur", wait=1);}
if (plots){ plot(erreurH1, fill=1, value=1, cmm="Erreur H1", wait=1);}

real eH1, eMax , nH1, nMax;
real eH1filtre, nH1filtre;

real eVP;

real eH1Interieur, eMaxInterieur , nH1Interieur, nMaxInterieur;
real eH1Interieurfiltre, nH1Interieurfiltre;

real eH1PhichiPhi = 0; real nH1PhichiPhi = 0;

eH1=int2d(Th)(dx(e)*dx(e)+dy(e)*dy(e) + e*e);
nH1 = int2d(Th)(dx(VecteurproprelocSrecombine)*dx(VecteurproprelocSrecombine)+dy(VecteurproprelocSrecombine)*dy(VecteurproprelocSrecombine) + VecteurproprelocSrecombine*VecteurproprelocSrecombine);

eH1filtre = int2d(Th)(FiltrePhi*(dx(e)*dx(e)+dy(e)*dy(e) + e*e));
nH1filtre = int2d(Th)(FiltrePhi*(dx(VecteurproprelocSrecombine)*dx(VecteurproprelocSrecombine)+dy(VecteurproprelocSrecombine)*dy(VecteurproprelocSrecombine) + VecteurproprelocSrecombine*VecteurproprelocSrecombine));

eMax=e[].max;
nMax=VecteurproprelocSrecombine[].max;

// Taking square roots, determining the relative errors
eH1 = sqrt(eH1/nH1);
eH1filtre = sqrt(eH1filtre/nH1filtre);
eMax=eMax/nMax;

eH1filtre = sqrt(eH1filtre/nH1filtre);

for (int k=0; k<Ntri; k++) {

    vk[][k]=1;
    
    // Defining the vertices of the ideal oversampling patch (possibly lying partially outside the global domain)
    real[int,int] Kx(3,2); //save coordinates of the vertices belonging to K
    for(int kk=0; kk<3; kk++) {
        Kx(kk,0) = TH[k][kk].x;
        Kx(kk,1) = TH[k][kk].y;
    }
    real xCL = (Kx(:,0).min); //we take a small margin around the vertices of S as computed above

    real xCR = (Kx(:,0).max);

    real yCL = (Kx(:,1).min);

    real yCR = (Kx(:,1).max);


    int[int] n2oFine;
    mesh Kh=trunc(Th, vk>0.5, split=1, new2old=n2oFine);
    fespace VK(Kh,P1);
    int[int] loc2globFine = restrict(VK, Vh, n2oFine);

    if ((xCL!=0) && (xCR !=1) && (yCL!=0) && (yCR !=1) ){
        
        VK VecteurproprelocK=0;
        VecteurproprelocK[] = VecteurproprelocS[](loc2globFine);

        // Renormalisation
        real normeL2locK=sqrt(int2d(Kh)(VecteurproprelocK*VecteurproprelocK));
        VecteurproprelocK[] = VecteurproprelocK[]/(normeL2locK/sqrt(int2d(Kh)(1)));

        VK eK=0;
        VK VecteurproprelocSrecombineK=0;
        VecteurproprelocSrecombineK[] = VecteurproprelocSrecombine[](loc2globFine);

        //renormalisation
        real normeL2VecteurproprelocSrecombineK=sqrt(int2d(Kh)(VecteurproprelocSrecombineK*VecteurproprelocSrecombineK));
        VecteurproprelocSrecombineK[] = VecteurproprelocSrecombineK[]/(normeL2VecteurproprelocSrecombineK/sqrt(int2d(Kh)(1)));


            //Construction des 3 fonctions de forme associées à l'élément K
        VK[int] phi(3); //storage of local basis function contributions in the offline loop
        VK[int] phirecombine(3);
        // Resolution of local problems
        varf defMS(uh,vh) = int2d(Kh)(VecteurproprelocK^2*a(Aeps,uh,vh)) + int1d(Kh)(tgv*uh*vh);
        varf defMSrecombine(uh,vh) = int2d(Kh)(VecteurproprelocSrecombineK^2*a(Aeps,uh,vh)) + int1d(Kh)(tgv*uh*vh);
        matrix Aloc=defMS(VK,VK);
        set(Aloc, solver=UMFPACK);
        matrix Alocrecombine=defMSrecombine(VK,VK);
        set(Alocrecombine, solver=UMFPACK);
        VH bc=0; //will hold the boundary condition for local problems
        for (int i=0; i<3; i++) {
            int dofi = VH(k,i); // the index in VH associated to vertex i of triangle k
            bc[][dofi] = 1;
            varf rhsloc(unused,vh) = int1d(Kh)(tgv*bc*vh);
            VK Bloc; Bloc[] = rhsloc(0,VK);
            phi[i][] = Aloc^-1*Bloc[];
            phirecombine[i][] = Alocrecombine^-1*Bloc[];
            bc[][dofi]=0;

            phi[i][]=phi[i][].*VecteurproprelocK[];
            phirecombine[i][]=phirecombine[i][].*VecteurproprelocSrecombineK[];

            VK DiffPhichiPhi = 0;
            DiffPhichiPhi = phi[i]-phirecombine[i];

            nH1PhichiPhi += int2d(Kh)(dx(phi[i])*dx(phi[i])+dy(phi[i])*dy(phi[i]) + phi[i]*phi[i]);
            eH1PhichiPhi += int2d(Kh)(dx(DiffPhichiPhi)*dx(DiffPhichiPhi)+dy(DiffPhichiPhi)*dy(DiffPhichiPhi) + DiffPhichiPhi*DiffPhichiPhi);

        }

        eK[] = VecteurproprelocSrecombineK[];
        eK[] = eK[] - VecteurproprelocK[];

        VK erreurH1K = 0;
        erreurH1K = dx(eK)*dx(eK) + dy(eK)*dy(eK) + eK*eK;
        /*plot(VecteurproprelocK, fill=1, value=1, cmm="Premier vecteur propre", wait=1);
        plot(VecteurproprelocSrecombineK, fill=1, value=1, cmm="Psi", wait=1);
        plot(eK, fill=1, value=1, cmm="Erreur", wait=1);
        plot(erreurH1K, fill=1, value=1, cmm="Erreur H1", wait=1);*/

        eH1Interieur += int2d(Kh)(dx(eK)*dx(eK)+dy(eK)*dy(eK) + eK*eK);
        nH1Interieur += int2d(Kh)(dx(VecteurproprelocSrecombineK)*dx(VecteurproprelocSrecombineK)+dy(VecteurproprelocSrecombineK)*dy(VecteurproprelocSrecombineK) + VecteurproprelocSrecombineK*VecteurproprelocSrecombineK);

        //cout << "eH1Interieur = " << int2d(Kh)(dx(eK)*dx(eK)+dy(eK)*dy(eK) + eK*eK) << endl;
        //cout << "nH1Interieur = " << int2d(Kh)(dx(VecteurproprelocSrecombineK)*dx(VecteurproprelocSrecombineK)+dy(VecteurproprelocSrecombineK)*dy(VecteurproprelocSrecombineK) + VecteurproprelocSrecombineK*VecteurproprelocSrecombineK) << endl;

        eH1Interieurfiltre += int2d(Kh)(FiltrePhi*(dx(eK)*dx(eK)+dy(eK)*dy(eK) + eK*eK));
        nH1Interieurfiltre += int2d(Kh)(FiltrePhi*(dx(VecteurproprelocSrecombineK)*dx(VecteurproprelocSrecombineK)+dy(VecteurproprelocSrecombineK)*dy(VecteurproprelocSrecombineK) + VecteurproprelocSrecombineK*VecteurproprelocSrecombineK));

        eMaxInterieur =max(eK[].max,eMaxInterieur);
        nMaxInterieur =max(VecteurproprelocSrecombineK[].max,nMaxInterieur);
}
vk[][k]=0;       
}
eH1Interieur = sqrt(eH1Interieur/nH1Interieur);
cout << "eH1Interieur = " << eH1Interieur << endl;
eH1Interieurfiltre = sqrt(eH1Interieurfiltre/nH1Interieurfiltre);
cout << "eH1Interieurfiltre = " << eH1Interieurfiltre << endl;
eMaxInterieur = eMaxInterieur/nMaxInterieur;
eH1PhichiPhi = sqrt(eH1PhichiPhi/nH1PhichiPhi);
cout << "eH1PhichiPhi = " << eH1PhichiPhi << endl;

// Writing errors on K to an external file
string errname = "Results/erreur_Cellule_unite_phi_filtre_phi_filtre_recombined" + "_Coeffs_" + NumCoeffDiff + ".txt";
ofstream ff(errname, append);
ff  << ParameterDescription << "n\t" << n << "\t"
    << "N\t" << Ndiscr << "\t"
    << "NumVP\t" << NumberEigenValue << "\t"
    << "osCoef\t" << osCoef << "\t"
    << endl;

ff  << "\t"
    << "eps\t" << eps << "\t"
    << "eH1\t" << eH1 << "\t"
    << "eH1filtre\t" << eH1filtre << "\t"
    << "eMax\t" << eMax << "\t"
    << "eH1Interieur\t" << eH1Interieur << "\t"
    << "eH1Interieurfiltre\t" << eH1Interieurfiltre << "\t"
    << "eMaxInterieur\t" << eMaxInterieur << "\t"
    << "eH1PhichiPhi\t" << eH1PhichiPhi << "\t"
    << endl;

ff<<endl;

printmessage("////////////////////////////////////////////////////////////////");