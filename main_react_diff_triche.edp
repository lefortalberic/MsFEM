// react_diff_P1.edp
//
// A FreeFEM++ script that shows the usual, intrusive MsFEM approach on a simple diffusion problem
//
// Note that this implementation is possible mainly due to the following in-depth functionality of FreeFEM++:
// - VK(k,i) gives the global degree of freedom of the ith local DOF in the kth triangle of the mesh

//mpirun -np 1 FreeFem++-mpi -wg main_react_diff_triche.edp -v 0
string nameMethod = "triche";

include "init.edp"

///////////////////////////////////////////////////////////////////////
// Offline stage                                                     //
// - Computation of spectral function Psi_triche                     //
// - Computation of multiscale basis functions                       //
// - Computation of stiffness matrix                                 //
//(- The discrete right-hand side is also computed here)             //
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// - Computation of spectral function Psi_triche                     //
///////////////////////////////////////////////////////////////////////

include "Psi_triche.edp"
///////////////////////////////////////////////////////////////////////
// - Computation of multiscale basis functions                       //
///////////////////////////////////////////////////////////////////////

Psieps = VecteurproprePsi(fmod(x/eps,1), fmod(y/eps,1)) ;

if (plots) plot(Psieps,wait=1,value=1,fill=1, cmm="Psi en x/eps sur Omega");

printmessage("Construction des fonctions de forme ");
tic = clock();

for (int k=0; k<Ntri; k++) {
	vk[][k]=1;
	mesh Kh=trunc(Th, vk>1e-10, split=1); //mesh for the fine-scale resolution of MsFEM functions   
	fespace VK(Kh,P1);
	VK[int] phi(3); //storage of local basis function contributions in the offline loop
	
	// Resolution of local problems
	varf defMS(uh,vh) = int2d(Kh)(Psieps^2*a(Aeps,uh,vh)) + int1d(Kh)(tgv*uh*vh);
	matrix Aloc=defMS(VK,VK);
	set(Aloc, solver=UMFPACK);
	VH bc=0; //will hold the boundary condition for local problems
	for (int i=0; i<3; i++) {
		int dofi = VH(k,i); // the index in VH associated to vertex i of triangle k
		bc[][dofi] = 1;
		varf rhsloc(unused,vh) = int1d(Kh)(tgv*bc*vh);
		VK Bloc; Bloc[] = rhsloc(0,VK);
		phi[i][] = Aloc^-1*Bloc[];
		bc[][dofi]=0;

        if (debug){
            plot(phi[i],wait=1,value=1,fill=1, cmm="fonction forme Chi");
        }
		int storei = 0;
        if (recombinebool){
            storei = storeIndex(recombine(k,Ntri),i); //indice pour la liste des fonctions Phieps, correspondant au i-ème sommet du k-ième triangle
        } else {
            storei = storeIndex(k,i); //indice pour la liste des fonctions Phieps, correspondant au i-ème sommet du k-ième triangle
        }
        phi[i]=phi[i]*Psieps;
		phiEps[storei][] = phi[i][]; // save basis functions for multiscale reconstruction below

        if (debug) plot(phi[i],wait=1,value=1,fill=1, cmm="fonction forme Psi*Chi");
        
	}
	// Computation of matrix elements
	for (int j=0; j<3; j++)
	{ //loop over all corners for matrix contributions on K
		for (int i=0; i<3; i++) {
			// int ii = contr[i]; // seems superfluous ???
			// Find global DOF index for trial functions j and test function i,
			// compute matrix contributions,
			// save these in Imat[nnz], Jmat[nnz] and Mmat[nnz]
            if (recombinebool){
                Imat[nnz] = VH(recombine(k,Ntri),i);
			    Jmat[nnz] = VH(recombine(k,Ntri),j);
            } else {
                Imat[nnz] = VH(k,i);
			    Jmat[nnz] = VH(k,j);
            }
			Amat[nnz] = int2d(Kh)(sigmaeps*phi[i]*phi[j]) + int2d(Kh)(eps^2*a(Aeps, phi[i], phi[j])); 
            Bmat[nnz] = int2d(Kh)(phi[i]*phi[j]);
			nnz++;
		}
	}
	vk[][k]=0;
}
toc = clock();

printmessage("Temps de construction des fonctions de forme : " << toc - tic << " secondes ");

///////////////////////////////////////////////////////////////////////
// Online stage                                                      //
///////////////////////////////////////////////////////////////////////

include "online_MsFEM.edp"


///////////////////////////////////////////////////////////////////////
// Reference solution and error computation                          //
///////////////////////////////////////////////////////////////////////

// Load or compute reference solution
 if (ErreurSurK) {
	{
		string solname = "./Solutions_reference/sol_" + nameMethod + parametersREF + ".txt";
		ofstream ff(solname);
		ff << VecteurpropreHProjetee[] << endl;
		ff << endl;
	}
}

include "post.edp"